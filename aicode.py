import streamlit as st
import pandas as pd
import json
import io
from PIL import Image
from pydantic import BaseModel, Field
from typing import List, Optional
from google import genai
from google.genai import types
import calendar

# --- 1. CONFIGURA√á√ÉO DE SEGURAN√áA E TEMA ---

# Cores baseadas na logo Hedgewise
PRIMARY_COLOR = "#0A2342"   # Azul Marinho Escuro (para bot√µes, links)
SECONDARY_COLOR = "#000000" # Preto (para t√≠tulos e texto principal)
BACKGROUND_COLOR = "#F0F2F6" # Cinza Claro (fundo sutil)
ACCENT_COLOR = "#007BFF" # Azul de Destaque para Fluxo Positivo
NEGATIVE_COLOR = "#DC3545" # Vermelho para Fluxo Negativo

# O usu√°rio enviou logo_hedgewise.png (AJUSTADO)
LOGO_FILENAME = "logo_hedgewise.png" 

st.set_page_config(
    page_title="Hedgewise | An√°lise Financeira Inteligente",
    page_icon="üìà",
    layout="wide"
)

# Adiciona CSS customizado para o tema
st.markdown(
    f"""
    <style>
        /* Estilo para o Bot√£o Principal */
        .stButton>button {{
            background-color: {PRIMARY_COLOR};
            color: white;
            border-radius: 8px;
            padding: 10px 20px;
            font-weight: bold;
            border: none;
            transition: background-color 0.3s;
        }}
        .stButton>button:hover {{
            background-color: #1C3757; 
            color: white;
        }}
        /* Fundo da Aplica√ß√£o */
        .stApp {{
            background-color: {BACKGROUND_COLOR};
        }}
        /* Header Principal */
        .main-header {{
            color: {SECONDARY_COLOR};
            font-size: 2.5em;
            padding-bottom: 10px;
        }}
        /* Container dos Widgets/KPIs - Estilo de Card Profissional */
        .kpi-container {{
            background-color: white;
            padding: 20px;
            border-radius: 12px;
            box-shadow: 0 6px 15px 0 rgba(0, 0, 0, 0.08); /* Sombra mais suave */
            margin-bottom: 20px;
            height: 100%; /* Garante altura uniforme */
        }}
        /* Estilos de M√©tricas */
        [data-testid="stMetricLabel"] label {{
            font-weight: 600 !important;
            color: #6c757d; /* Texto cinza suave para a label */
        }}
        [data-testid="stMetricValue"] {{
            font-size: 1.8em !important;
            color: {SECONDARY_COLOR};
        }}
        /* Estilo para Abas (Tabs) */
        button[data-baseweb="tab"] {{
            color: #6c757d;
            border-bottom: 2px solid transparent;
            font-weight: 600;
        }}
        button[data-baseweb="tab"][aria-selected="true"] {{
            color: {PRIMARY_COLOR};
            border-bottom: 3px solid {PRIMARY_COLOR} !important;
        }}
        /* T√≠tulos */
        h2 {{
            color: {PRIMARY_COLOR};
            border-left: 5px solid {PRIMARY_COLOR};
            padding-left: 10px;
            margin-top: 20px;
            margin-bottom: 20px;
        }}
    </style>
    """,
    unsafe_allow_html=True
)

# Inicializa o estado da sess√£o para armazenar o DataFrame
if 'df_transacoes_editado' not in st.session_state:
    st.session_state['df_transacoes_editado'] = pd.DataFrame()
if 'relatorio_consolidado' not in st.session_state:
    st.session_state['relatorio_consolidado'] = "Aguardando an√°lise de dados..."

# Inicializa o cliente Gemini
try:
    # Tenta carregar a chave de API dos secrets do Streamlit Cloud
    api_key = st.secrets["GEMINI_API_KEY"]
    client = genai.Client(api_key=api_key)
except (KeyError, AttributeError):
    st.error("ERRO: Chave 'GEMINI_API_KEY' n√£o encontrada nos secrets do Streamlit. Por favor, configure-a para rodar a aplica√ß√£o.")
    st.stop()


# --- 2. DEFINI√á√ÉO DO SCHEMA PYDANTIC (Estrutura de Sa√≠da) ---

class Transacao(BaseModel):
    """Representa uma √∫nica transa√ß√£o no extrato banc√°rio."""
    data: str = Field(
        description="A data da transa√ß√£o no formato 'DD/MM/AAAA' ou 'AAAA-MM-DD'."
    )
    descricao: str = Field(
        description="Descri√ß√£o detalhada da transa√ß√£o, como o nome do estabelecimento ou tipo de servi√ßo."
    )
    valor: float = Field(
        description="O valor num√©rico da transa√ß√£o. Sempre positivo. Ex: 150.75"
    )
    tipo_movimentacao: str = Field(
        description="Classifica√ß√£o da movimenta√ß√£o: 'DEBITO' ou 'CREDITO'."
    )
    categoria_sugerida: str = Field(
        description="Sugest√£o de categoria mais relevante para esta transa√ß√£o (Ex: 'Alimenta√ß√£o', 'Transporte', 'Sal√°rio', 'Investimento', 'Servi√ßos')."
    )
    categoria_dcf: str = Field( 
        description="Classifica√ß√£o da transa√ß√£o para o Demonstrativo de Fluxo de Caixa (DCF): 'OPERACIONAL', 'INVESTIMENTO' ou 'FINANCIAMENTO'."
    )
    # NOVO CAMPO: Entidade
    entidade: str = Field(
        description="Classifica√ß√£o bin√°ria para identificar a origem/destino da movimenta√ß√£o: 'EMPRESARIAL' (relacionada ao neg√≥cio) ou 'PESSOAL' (retiradas dos s√≥cios ou gastos pessoais detectados)."
    )

class ExtratoBancarioCompleto(BaseModel):
    """Cont√©m a lista de transa√ß√µes e o relat√≥rio de an√°lise."""
    transacoes: List[Transacao] = Field(
        description="Uma lista de objetos 'Transacao' extra√≠dos do documento."
    )
    saldo_final: float = Field(
        description="O saldo final da conta no extrato. Use zero se n√£o for encontrado."
    )
    relatorio_analise: str = Field(
        description="Confirma√ß√£o de extra√ß√£o dos dados deste extrato. Use 'Extra√ß√£o de dados conclu√≠da com sucesso.'"
    )


# --- 3. FUN√á√ÉO DE CHAMADA DA API PARA EXTRA√á√ÉO ---

# CORRE√á√ÉO CR√çTICA: Adiciona hash_funcs={genai.Client: lambda _: None} para evitar o UnhashableParamError
@st.cache_data(show_spinner=False, hash_funcs={genai.Client: lambda _: None})
def analisar_extrato(pdf_bytes: bytes, filename: str, client: genai.Client) -> dict:
    """Chama a Gemini API para extrair dados estruturados e classificar DCF e Entidade."""
    
    pdf_part = types.Part.from_bytes(data=pdf_bytes, mime_type='application/pdf')

    # Prompt atualizado para incluir a classifica√ß√£o da nova coluna 'entidade'
    prompt_analise = (
        f"Voc√™ √© um especialista em extra√ß√£o e classifica√ß√£o de dados financeiros. "
        f"Seu trabalho √© extrair todas as transa√ß√µes deste extrato banc√°rio em PDF do arquivo '{filename}' e "
        "classificar cada transa√ß√£o rigorosamente em uma 'categoria_dcf' ('OPERACIONAL', 'INVESTIMENTO' ou 'FINANCIAMENTO') E "
        "em uma 'entidade' ('EMPRESARIAL' ou 'PESSOAL'). "
        "Use o contexto de que a maioria das movimenta√ß√µes devem ser EMPRESARIAIS, mas qualquer retirada para s√≥cios, pagamento de contas pessoais ou compras n√£o relacionadas ao CNPJ deve ser classificada como PESSOAL. "
        "N√£o gere relat√≥rios. Preencha apenas a estrutura JSON rigorosamente. "
        "Use sempre o valor positivo para 'valor' e classifique estritamente como 'DEBITO' ou 'CREDITO'."
    )
    
    config = types.GenerateContentConfig(
        response_mime_type="application/json",
        response_schema=ExtratoBancarioCompleto,
        temperature=0.2 # Baixa temperatura para foco na extra√ß√£o
    )

    try:
        response = client.models.generate_content(
            model='gemini-2.5-pro',
            contents=[pdf_part, prompt_analise],
            config=config,
        )
        
        response_json = json.loads(response.text)
        dados_pydantic = ExtratoBancarioCompleto(**response_json)
        
        return dados_pydantic.model_dump()
    
    except Exception as e:
        error_message = str(e)
        
        # TRATAMENTO ESPEC√çFICO PARA ERRO DE SOBRECARGA DA API (503 UNAVAILABLE)
        if "503 UNAVAILABLE" in error_message or "model is overloaded" in error_message:
            st.error(f"‚ö†Ô∏è ERRO DE CAPACIDADE DA API: O modelo Gemini est√° sobrecarregado (503 UNAVAILABLE) ao processar {filename}.")
            st.info("Este √© um erro tempor√°rio do servidor da API. Por favor, tente novamente em alguns minutos. O problema n√£o est√° no seu c√≥digo ou no seu PDF.")
        else:
            # Erro gen√©rico (API Key errada, PDF ileg√≠vel, etc.)
            st.error(f"Erro ao chamar a Gemini API para {filename}: {error_message}")
            st.info("Verifique se o PDF est√° leg√≠vel ou se a API Key est√° configurada corretamente.")

        return {
            'transacoes': [], 
            'saldo_final': 0.0, 
            'relatorio_analise': f"**Falha na Extra√ß√£o:** Ocorreu um erro ao processar o arquivo {filename}. Motivo: {error_message}"
        }

# --- 3.1. FUN√á√ÉO DE GERA√á√ÉO DE RELAT√ìRIO CONSOLIDADO ---

# Esta fun√ß√£o n√£o precisa de hash_funcs, pois √© chamada fora do cache
def gerar_relatorio_consolidado(df_transacoes: pd.DataFrame, contexto_adicional: str, client: genai.Client) -> str:
    """Gera o relat√≥rio de an√°lise consolidado, agora mais conciso e focado no split Entidade/DCF."""
    
    # Prepara os dados para an√°lise (JSON)
    # Nota: Usar 'iso' para datas em JSON √© o padr√£o recomendado.
    transacoes_json = df_transacoes.to_json(orient='records', date_format='iso', indent=2)
    
    # Adiciona o contexto do usu√°rio ao prompt
    contexto_prompt = ""
    if contexto_adicional:
        contexto_prompt = f"\n\n--- CONTEXTO ADICIONAL DO EMPREENDEDOR ---\n{contexto_adicional}\n--- FIM DO CONTEXTO ---\n"
    
    # Prompt de relat√≥rio ajustado para ser EXTREMAMENTE CONCISO e focado no p√∫blico-alvo
    prompt_analise = (
        "Voc√™ √© um analista financeiro de elite, especializado em PME (Pequenas e M√©dias Empresas). "
        "Seu trabalho √© analisar o conjunto de transa√ß√µes CONSOLIDADAS (incluindo as corre√ß√µes manuais do usu√°rio) fornecido abaixo em JSON. "
        "Todas as transa√ß√µes j√° est√£o classificadas em 'OPERACIONAL', 'INVESTIMENTO' ou 'FINANCIAMENTO' e em 'EMPRESARIAL' ou 'PESSOAL'. "
        "Gere um relat√≥rio de an√°lise EXTREMAMENTE CONCISO, FOCADO E ACION√ÅVEL, voltado para a gest√£o de caixa. "
        
        f"{contexto_prompt}" # Inclui o contexto adicional aqui
        
        "√â mandat√≥rio que voc√™ inclua as seguintes an√°lises, separadas por par√°grafos curtos: "
        "1. Desempenho Operacional: Calcule e detalhe o saldo l√≠quido total gerado pela atividade OPERACIONAL. √â este saldo que cobre as demais atividades e retiradas. "
        "2. Fluxo de Caixa Total e Impacto Pessoal: Calcule o Fluxo de Caixa Total. Comente o impacto do fluxo PESSOAL no caixa (sa√≠das PESSOAIS, como pr√≥-labore ou retiradas indevidas). O saldo operacional foi suficiente para cobrir as retiradas? "
        "3. Sugest√µes Estrat√©gicas: Sugest√µes acion√°veis para otimizar o capital de giro e melhorar o fluxo operacional. "
        "Use apenas texto simples e Markdown b√°sico (como negrito `**`). N√£o use listas, headings ou s√≠mbolos de moeda (R$) no corpo do relat√≥rio."
        "\n\n--- DADOS CONSOLIDADOS (JSON) ---\n"
        f"{transacoes_json}"
    )
    
    config = types.GenerateContentConfig(temperature=0.4)
    
    try:
        response = client.models.generate_content(
            model='gemini-2.5-pro',
            contents=[prompt_analise],
            config=config,
        )
        return response.text
    except Exception as e:
        return f"**Falha na Gera√ß√£o do Relat√≥rio Consolidado:** Ocorreu um erro ao gerar o relat√≥rio anal√≠tico. Motivo: {e}"

# --- 4. FUN√á√ÉO DE CABE√áALHO ---

def load_header():
    """Carrega o logo e exibe o t√≠tulo principal usando st.columns para melhor layout."""
    try:
        # AQUI BUSCA AGORA O ARQUIVO .PNG
        logo = Image.open(LOGO_FILENAME)
        
        col1, col2 = st.columns([1, 6])
        
        with col1:
            st.image(logo, width=100)
            
        with col2:
            st.markdown('<div class="main-header">Hedgewise</div>', unsafe_allow_html=True)
            st.caption("An√°lise Financeira Inteligente para PME")
            
        st.markdown("---")
        
    except FileNotFoundError:
        st.title("Hedgewise | An√°lise Financeira Inteligente")
        st.warning(f"Aten√ß√£o: O arquivo da logo '{LOGO_FILENAME}' n√£o foi encontrado. O t√≠tulo √© exibido sozinho.")
        st.markdown("---")
    except Exception as e:
        st.title("Hedgewise | An√°lise Financeira Inteligente")
        st.error(f"Erro ao carregar a logo: {e}")
        st.markdown("---")


# --- 5. FUN√á√ÉO PARA CRIAR GR√ÅFICOS DO DASHBOARD ---

def criar_dashboard(df: pd.DataFrame):
    """Cria os gr√°ficos de fluxo de caixa mensal separados por Entidade (Empresarial/Pessoal)."""
    st.subheader("Dashboard: Fluxo de Caixa Mensal por Entidade")
    
    if df.empty:
        st.info("Nenhum dado dispon√≠vel para o dashboard. Por favor, analise e confirme as transa√ß√µes na aba anterior.")
        return

    try:
        # 1. Pr√©-processamento e C√°lculo do Fluxo
        # Converte a data para datetime e extrai M√™s/Ano (garantindo que s√≥ datas v√°lidas prossigam)
        df['data'] = pd.to_datetime(df['data'], errors='coerce', dayfirst=True)
        df.dropna(subset=['data'], inplace=True) # Remove linhas com data inv√°lida
        df['mes_ano'] = df['data'].dt.to_period('M')

        # Cria a coluna de Fluxo: Cr√©dito - D√©bito
        df['fluxo'] = df.apply(
            lambda row: row['valor'] if row['tipo_movimentacao'] == 'CREDITO' else -row['valor'], 
            axis=1
        )
        
        # 2. Agrupamento e Pivota√ß√£o dos Dados
        df_agrupado = df.groupby(['mes_ano', 'entidade'])['fluxo'].sum().reset_index()
        df_agrupado['mes_ano_str'] = df_agrupado['mes_ano'].dt.strftime('%Y-%m')

        # Pivota a tabela para ter Entidades como colunas para o gr√°fico
        df_pivot = df_agrupado.pivot(index='mes_ano_str', columns='entidade', values='fluxo').fillna(0)

        # CORRE√á√ÉO DE ROBUSTEZ: Garante que as colunas cr√≠ticas existam (evitando KeyError)
        required_columns = ['EMPRESARIAL', 'PESSOAL']
        for col in required_columns:
            if col not in df_pivot.columns:
                df_pivot[col] = 0.0
        
        # Reordena o √≠ndice para garantir a ordem cronol√≥gica
        df_pivot.sort_index(inplace=True)
        
        # 3. Cria√ß√£o do Gr√°fico (Fluxo de Caixa Mensal)
        st.markdown("### Comparativo Mensal de Fluxo (R$)")
        
        # Cria a coluna de Capacidade de Cobertura
        df_pivot['Cobertura_Ent_vs_Pes'] = df_pivot['EMPRESARIAL'] + df_pivot['PESSOAL']

        # Gr√°fico de barras com a separa√ß√£o por entidade (fluxo de cada um)
        st.bar_chart(
            df_pivot[['EMPRESARIAL', 'PESSOAL']],
            color={
                "EMPRESARIAL": PRIMARY_COLOR,
                "PESSOAL": NEGATIVE_COLOR,
            },
            height=350
        )
        st.caption("O fluxo PESSOAL representa as retiradas ou gastos do s√≥cio. O fluxo EMPRESARIAL deve ser positivo para cobrir o PESSOAL.")
        
        
        # Gr√°fico de Linha (Capacidade de Cobertura)
        st.markdown("### Saldo de Caixa Ap√≥s Retiradas/Pagamentos Pessoais")
        st.line_chart(
            df_pivot['Cobertura_Ent_vs_Pes'],
            color=ACCENT_COLOR,
            height=350
        )
        st.caption("Linha do tempo: Se o valor estiver acima de zero, o caixa da empresa cresceu. Se estiver abaixo, o caixa diminuiu no m√™s (considerando o fluxo pessoal).")

    except Exception as e:
        st.error(f"Erro ao gerar o dashboard: {e}")
        st.info("Verifique se as colunas 'entidade', 'valor' e 'data' est√£o preenchidas corretamente.")


# --- 6. INTERFACE STREAMLIT PRINCIPAL ---

load_header()

tab1, tab2 = st.tabs(["üìä An√°lise e Corre√ß√£o de Dados", "üìà Dashboard & Fluxo de Caixa"])

with tab1:
    st.markdown("## 1. Upload e Extra√ß√£o de Dados")
    st.markdown("Fa√ßa o upload dos extratos em PDF para que o Gemini possa extrair e classificar as transa√ß√µes. **√â fundamental revisar e corrigir a coluna 'Entidade' (Empresarial/Pessoal).**")

    col_upload, col_contexto = st.columns([1, 1])
    
    with col_upload:
        # Permite m√∫ltiplos arquivos
        uploaded_files = st.file_uploader(
            "Selecione os arquivos PDF dos seus extratos banc√°rios",
            type="pdf",
            accept_multiple_files=True,
            help="Os PDFs devem ter texto selecion√°vel. Voc√™ pode selecionar m√∫ltiplos arquivos de contas diferentes para uma an√°lise consolidada."
        )

    with col_contexto:
        # Caixa de texto para contexto adicional
        contexto_adicional = st.text_area(
            "2. Contexto Adicional para a An√°lise (Opcional)",
            placeholder="Ex: 'Todos os dep√≥sitos em dinheiro (cash) s√£o provenientes de vendas diretas.'",
            help="Use este campo para fornecer √† IA informa√ß√µes contextuais que n√£o est√£o nos extratos."
        )


    if uploaded_files: # Verifica se h√° arquivos
        
        # Bot√£o para iniciar a an√°lise
        if st.button(f"3. Executar Extra√ß√£o e Classifica√ß√£o ({len(uploaded_files)} arquivos)", key="analyze_btn"):
            
            # --- Fase de Extra√ß√£o ---
            todas_transacoes = []
            saldos_finais = 0.0
            
            extraction_status = st.status("Iniciando extra√ß√£o e classifica√ß√£o...", expanded=True)
            
            for i, uploaded_file in enumerate(uploaded_files):
                extraction_status.write(f"Extraindo dados do arquivo {i+1} de {len(uploaded_files)}: **{uploaded_file.name}**")
                
                pdf_bytes = uploaded_file.getvalue()
                with extraction_status:
                    # Chama a fun√ß√£o, que agora √© cache√°vel corretamente
                    dados_dict = analisar_extrato(pdf_bytes, uploaded_file.name, client)

                todas_transacoes.extend(dados_dict['transacoes'])
                saldos_finais += dados_dict['saldo_final']
            
            # 4. Consolida√ß√£o e salvamento no estado da sess√£o
            df_transacoes = pd.DataFrame(todas_transacoes)
            
            if df_transacoes.empty:
                # O status de erro espec√≠fico da API j√° foi impresso na fun√ß√£o analisar_extrato
                extraction_status.error("‚ùå Nenhuma transa√ß√£o v√°lida foi extra√≠da. Verifique as mensagens de erro acima.")
                st.session_state['df_transacoes_editado'] = pd.DataFrame()
            else:
                extraction_status.update(label=f"‚úÖ Extra√ß√£o de {len(todas_transacoes)} transa√ß√µes conclu√≠da!", state="complete", expanded=False)
                
                # Formata√ß√£o e ordena√ß√£o inicial
                df_transacoes['valor'] = pd.to_numeric(df_transacoes['valor'], errors='coerce')
                
                # Converte para datetime e mant√©m o tipo nativo do Pandas.
                df_transacoes['data'] = pd.to_datetime(df_transacoes['data'], errors='coerce', dayfirst=True)
                
                # NOVO: Limpeza e garantia de tipos (Robustez contra dados faltantes do Gemini)
                df_transacoes['valor'] = df_transacoes['valor'].fillna(0)
                df_transacoes['tipo_movimentacao'] = df_transacoes['tipo_movimentacao'].fillna('DEBITO')
                df_transacoes['entidade'] = df_transacoes['entidade'].fillna('EMPRESARIAL') # Default mais seguro
                df_transacoes['categoria_dcf'] = df_transacoes['categoria_dcf'].fillna('OPERACIONAL')
                
                # Armazena o DataFrame extra√≠do para a edi√ß√£o
                st.session_state['df_transacoes_editado'] = df_transacoes
                st.session_state['contexto_adicional'] = contexto_adicional
                st.session_state['saldos_finais'] = saldos_finais

        
        # --- Fase de Edi√ß√£o e Gera√ß√£o de Relat√≥rio ---
        
        if not st.session_state['df_transacoes_editado'].empty:
            
            df_para_editar = st.session_state['df_transacoes_editado'].copy()
            
            st.markdown("---")
            st.markdown("## 4. Revis√£o e Corre√ß√£o Manual dos Dados")
            st.info("‚ö†Ô∏è **IMPORTANTE:** Revise as colunas 'Entidade' (Empresarial/Pessoal) e 'Classifica√ß√£o DCF' e corrija manualmente qualquer erro de classifica√ß√£o. O relat√≥rio e o Dashboard usar√£o estes dados corrigidos.")
            
            # st.data_editor permite a edi√ß√£o interativa dos dados
            edited_df = st.data_editor(
                df_para_editar,
                use_container_width=True,
                column_config={
                    # A coluna 'data' √© um datetime object, compat√≠vel com DateColumn
                    "data": st.column_config.DateColumn("Data", format="YYYY-MM-DD", required=True),
                    "valor": st.column_config.NumberColumn("Valor (R$)", format="R$ %0.2f", required=True),
                    "tipo_movimentacao": st.column_config.SelectboxColumn(
                        "Tipo", 
                        options=["CREDITO", "DEBITO"], 
                        required=True
                    ),
                    "categoria_dcf": st.column_config.SelectboxColumn(
                        "Classifica√ß√£o DCF", 
                        options=["OPERACIONAL", "INVESTIMENTO", "FINANCIAMENTO"], 
                        required=True
                    ),
                    "entidade": st.column_config.SelectboxColumn(
                        "Entidade", 
                        options=["EMPRESARIAL", "PESSOAL"], 
                        required=True
                    ),
                },
                num_rows="dynamic", # Permite adicionar/remover linhas (opcional, mas funcional)
                key="data_editor_transacoes"
            )

            if st.button("5. Gerar Relat√≥rio e Dashboard com Dados Corrigidos", key="generate_report_btn"):
                
                # Armazena a vers√£o editada no estado
                st.session_state['df_transacoes_editado'] = edited_df
                
                # Rec√°lculos de KPI consolidados
                total_credito = edited_df[edited_df['tipo_movimentacao'] == 'CREDITO']['valor'].sum()
                total_debito = edited_df[edited_df['tipo_movimentacao'] == 'DEBITO']['valor'].sum()
                saldo_periodo = total_credito - total_debito
                
                # Gera√ß√£o do Relat√≥rio Consolidado (SEGUNDA CHAMADA AO GEMINI)
                with st.spinner("Gerando Relat√≥rio de An√°lise Consolidada..."):
                    relatorio_consolidado = gerar_relatorio_consolidado(edited_df, st.session_state.get('contexto_adicional', ''), client)
                
                st.session_state['relatorio_consolidado'] = relatorio_consolidado

                # Exibi√ß√£o dos KPIs Consolidados
                st.markdown("---")
                st.markdown("## Resumo Financeiro CONSOLIDADO do Per√≠odo (P√≥s-Corre√ß√£o)")
                kpi_col1, kpi_col2, kpi_col3 = st.columns(3)
                
                with kpi_col1:
                    st.markdown('<div class="kpi-container">', unsafe_allow_html=True)
                    st.metric("Total de Cr√©ditos", f"R$ {total_credito:,.2f}")
                    st.markdown('</div>', unsafe_allow_html=True)

                with kpi_col2:
                    st.markdown('<div class="kpi-container">', unsafe_allow_html=True)
                    st.metric("Total de D√©bitos", f"R$ {total_debito:,.2f}")
                    st.markdown('</div>', unsafe_allow_html=True)

                with kpi_col3:
                    st.markdown('<div class="kpi-container">', unsafe_allow_html=True)
                    delta_color = "normal" if saldo_periodo >= 0 else "inverse"
                    st.metric("Resultado do Per√≠odo", f"R$ {saldo_periodo:,.2f}", delta_color=delta_color)
                    st.markdown('</div>', unsafe_allow_html=True)

                st.markdown("---")
                st.subheader("Relat√≥rio de An√°lise de Fluxo de Caixa (DCF) Consolidada")
                st.markdown(st.session_state['relatorio_consolidado'])
                
                st.success("Relat√≥rio gerado! Acesse a aba **Dashboard & Fluxo de Caixa** para ver os gr√°ficos.")
            
        elif uploaded_files and 'df_transacoes_editado' not in st.session_state:
            st.info("Pressione o bot√£o 'Executar Extra√ß√£o e Classifica√ß√£o' para iniciar a an√°lise.")

with tab2:
    st.markdown("## 6. Relat√≥rios Gerenciais e Dashboard")
    
    # 6.1. Exibe o Relat√≥rio de An√°lise
    if st.session_state['relatorio_consolidado'] and st.session_state['relatorio_consolidado'] != "Aguardando an√°lise de dados...":
        st.subheader("Relat√≥rio de An√°lise Consolidada (Texto)")
        st.markdown(st.session_state['relatorio_consolidado'])
        st.markdown("---")
    
    # 6.2. Cria os Gr√°ficos
    if not st.session_state['df_transacoes_editado'].empty:
        df_final = st.session_state['df_transacoes_editado']
        criar_dashboard(df_final)
    else:
        st.warning("Nenhum dado processado encontrado. Volte para a aba **An√°lise e Corre√ß√£o de Dados** e execute o processamento para visualizar o Dashboard.")

# --- Rodap√© ---
st.markdown("---")
try:
    # AQUI TAMB√âM BUSCA O ARQUIVO .PNG
    footer_logo = Image.open(LOGO_FILENAME)
    footer_col1, footer_col2 = st.columns([1, 4]) 
    
    with footer_col1:
        st.image(footer_logo, width=40)
        
    with footer_col2:
        st.markdown(
            """
            <p style="font-size: 0.8rem; color: #6c757d; margin: 0; padding-top: 5px;">
                An√°lise de Extrato Empresarial | Dados extra√≠dos e classificados com Gemini 2.5 Pro.
            </p>
            """,
            unsafe_allow_html=True
        )
        
except Exception:
    st.markdown(
        """
        <p style="font-size: 0.8rem; color: #6c757d; margin: 0; padding-top: 10px;">
            An√°lise de Extrato Empresarial | Dados extra√≠dos e classificados com Gemini 2.5 Pro.
        </p>
        """, # <--- O par√™ntese de fechamento estava faltando aqui na linha 557
        unsafe_allow_html=True
    )
