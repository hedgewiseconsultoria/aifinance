import streamlit as st
import pandas as pd
import json
import io
from PIL import Image
from pydantic import BaseModel, Field
from typing import List, Optional
from google import genai
from google.genai import types

# --- 1. CONFIGURA√á√ÉO DE SEGURAN√áA E TEMA ---

# Cores baseadas na logo Hedgewise
PRIMARY_COLOR = "#0A2342"   # Azul Marinho Escuro (para bot√µes, links)
SECONDARY_COLOR = "#000000" # Preto (para t√≠tulos e texto principal)
BACKGROUND_COLOR = "#F0F2F6" # Cinza Claro (fundo sutil)
ACCENT_COLOR = "#007BFF" # Azul de Destaque para Fluxo Positivo
NEGATIVE_COLOR = "#DC3545" # Vermelho para Fluxo Negativo

# Nome do arquivo da logo dispon√≠vel localmente (AJUSTADO PARA .PNG)
LOGO_FILENAME = "logo_hedgewise.png" 
LOGO_URL = "logo_hedgewise.png" 

st.set_page_config(
    page_title="Hedgewise | An√°lise Financeira Inteligente",
    page_icon="üìà",
    layout="wide"
)

# Adiciona CSS customizado para o tema
st.markdown(
    f"""
    <style>
        /* Estilo para o Bot√£o Principal */
        .stButton>button {{
            background-color: {PRIMARY_COLOR};
            color: white;
            border-radius: 8px;
            padding: 10px 20px;
            font-weight: bold;
            border: none;
            transition: background-color 0.3s;
        }}
        .stButton>button:hover {{
            background-color: #1C3757; 
            color: white;
        }}
        /* Fundo da Aplica√ß√£o */
        .reportview-container {{
            background: {BACKGROUND_COLOR};
        }}
        /* Header Principal (Agora usado apenas para a linha divis√≥ria) */
        .main-header {{
            color: {SECONDARY_COLOR};
            font-size: 2.5em;
            padding-bottom: 10px;
        }}
        /* Container dos Widgets/KPIs - Estilo de Card Profissional */
        .kpi-container {{
            background-color: white;
            padding: 20px;
            border-radius: 12px;
            box-shadow: 0 6px 15px 0 rgba(0, 0, 0, 0.08); /* Sombra mais suave */
            margin-bottom: 20px;
            height: 100%; /* Garante altura uniforme */
        }}
        /* Estilos de M√©tricas */
        .stMetric label {{
            font-weight: 600 !important;
            color: #6c757d; /* Texto cinza suave para a label */
        }}
        .stMetric div[data-testid="stMetricValue"] {{
            font-size: 1.8em !important;
            color: {SECONDARY_COLOR};
        }}
        
        /* O CSS do rodap√© fixo foi removido para usar widgets nativos (st.columns) */
    </style>
    """,
    unsafe_allow_html=True
)

# Inicializa o cliente Gemini
try:
    # Tenta carregar a chave de API dos secrets do Streamlit Cloud
    api_key = st.secrets["GEMINI_API_KEY"]
    client = genai.Client(api_key=api_key)
except (KeyError, AttributeError):
    st.error("ERRO: Chave 'GEMINI_API_KEY' n√£o encontrada nos secrets do Streamlit. Por favor, configure-a para rodar a aplica√ß√£o.")
    st.stop()


# --- 2. DEFINI√á√ÉO DO SCHEMA PYDANTIC (Estrutura de Sa√≠da) ---

class Transacao(BaseModel):
    """Representa uma √∫nica transa√ß√£o no extrato banc√°rio."""
    data: str = Field(
        description="A data da transa√ß√£o no formato 'DD/MM/AAAA' ou 'AAAA-MM-DD'."
    )
    descricao: str = Field(
        description="Descri√ß√£o detalhada da transa√ß√£o, como o nome do estabelecimento ou tipo de servi√ßo."
    )
    valor: float = Field(
        description="O valor num√©rico da transa√ß√£o. Sempre positivo. Ex: 150.75"
    )
    tipo_movimentacao: str = Field(
        description="Classifica√ß√£o da movimenta√ß√£o: 'DEBITO' ou 'CREDITO'."
    )
    categoria_sugerida: str = Field(
        description="Sugest√£o de categoria mais relevante para esta transa√ß√£o (Ex: 'Alimenta√ß√£o', 'Transporte', 'Sal√°rio', 'Investimento', 'Servi√ßos')."
    )

class ExtratoBancarioCompleto(BaseModel):
    """Cont√©m a lista de transa√ß√µes e o relat√≥rio de an√°lise."""
    
    transacoes: List[Transacao] = Field(
        description="Uma lista de objetos 'Transacao' extra√≠dos do documento."
    )
    saldo_final: float = Field(
        description="O saldo final da conta no extrato. Use zero se n√£o for encontrado."
    )
    relatorio_analise: str = Field(
        description=(
            "An√°lise financeira AVAN√áADA e detalhada para o empreendedor. "
            "Inclua as seguintes se√ß√µes: 1. Sum√°rio Executivo, 2. An√°lise de Fluxo de Caixa (Total D√©bito/Cr√©dito e Saldo M√©dio), 3. AN√ÅLISE DO DEMONSTRATIVO DE FLUXO DE CAIXA (DCF): Detalhe o saldo l√≠quido gerado pelas atividades OPERACIONAIS, de INVESTIMENTO e de FINANCIAMENTO. 4. Tend√™ncias de Gastos (As 3 Categorias de Maior Impacto e a que mais Cresceu), 5. Sugest√µes Estrat√©gicas para Otimiza√ß√£o de Capital."
        )
    )


# --- 3. FUN√á√ÉO DE CHAMADA DA API ---

# O tipo de retorno foi alterado para 'dict' para ser serializ√°vel pelo Streamlit Cache
# O cache_data agora usa o nome do arquivo como parte da chave para diferenciar
@st.cache_data(show_spinner="Analisando PDF com Gemini (pode demorar at√© 30 segundos)...")
def analisar_extrato(pdf_bytes: bytes, filename: str) -> dict:
    """Chama a Gemini API para extrair dados e gerar o relat√≥rio estruturado."""
    
    # Prepara a parte do arquivo PDF
    pdf_part = types.Part.from_bytes(data=pdf_bytes, mime_type='application/pdf')

    # Prompt instruindo o modelo a gerar a an√°lise avan√ßada
    prompt_analise = (
        f"Voc√™ √© um analista financeiro especializado em micro e pequenas empresas (PME), focado na metodologia do **Demonstrativo de Fluxo de Caixa (DCF)**. "
        f"Este extrato se refere ao arquivo '{filename}'. " # Adicionando o nome do arquivo ao prompt
        "Seu trabalho √© extrair todas as transa√ß√µes deste extrato banc√°rio em PDF e, "
        "simultaneamente, gerar um relat√≥rio de an√°lise AVAN√áADA, T√âCNICA E DIRETA AO PONTO. " 
        "Ao gerar o 'relatorio_analise', **√© mandat√≥rio** que voc√™ classifique cada transa√ß√£o como 'OPERACIONAL', 'INVESTIMENTO' ou 'FINANCIAMENTO' para calcular o fluxo de caixa l√≠quido gerado por cada uma dessas tr√™s atividades. "
        "Ao formatar o relat√≥rio, **use apenas texto simples e Markdown b√°sico (como negrito `**` e listas)**. √â **fundamental** que voc√™ evite: "
        "1. **C√≥digos LaTeX ou caracteres especiais**."
        "2. **S√≠mbolos de moeda (R$) ou separadores de milhar (ponto/v√≠rgula)** em valores monet√°rios no corpo do relat√≥rio. Use apenas n√∫meros no formato de texto simples, por exemplo: 'O caixa l√≠quido foi de 2227.39'. A exibi√ß√£o da moeda e formata√ß√£o final ser√° feita pela interface. " 
        "Preencha rigorosamente a estrutura JSON fornecida, em particular o campo 'relatorio_analise', "
        "garantindo que o relat√≥rio seja detalhado, profissional e contenha insights acion√°veis sobre o fluxo de caixa do empreendedor, destacando o CAIXA GERADO PELA ATIVIDADE OPERACIONAL. "
        "Use sempre o valor positivo para 'valor' e classifique estritamente como 'DEBITO' ou 'CREDITO'."
    )
    
    # Configura√ß√£o de gera√ß√£o para JSON estruturado
    config = types.GenerateContentConfig(
        response_mime_type="application/json",
        response_schema=ExtratoBancarioCompleto,
        # Aumentar a temperatura levemente para dar criatividade na an√°lise, mantendo a estrutura
        temperature=0.4 
    )

    try:
        response = client.models.generate_content(
            model='gemini-2.5-pro', # Modelo PRO para maior precis√£o e racioc√≠nio complexo
            contents=[pdf_part, prompt_analise],
            config=config,
        )
        
        # Converte a string JSON de resposta em um objeto Pydantic
        response_json = json.loads(response.text)
        dados_pydantic = ExtratoBancarioCompleto(**response_json)
        
        # Retorna o objeto Pydantic como um dicion√°rio Python padr√£o
        return dados_pydantic.model_dump()
    
    except Exception as e:
        st.error(f"Erro ao chamar a Gemini API para {filename}: {e}")
        st.info("Verifique se o PDF est√° leg√≠vel e se a API Key est√° configurada corretamente.")
        # Retorna estrutura vazia em caso de falha para n√£o interromper a an√°lise dos outros arquivos
        return {
            'transacoes': [], 
            'saldo_final': 0.0, 
            'relatorio_analise': f"**Falha na An√°lise:** Ocorreu um erro ao processar o arquivo {filename}. Motivo: {e}"
        }


# --- 4. FUN√á√ÉO DE CABE√áALHO ---

def load_header():
    """Carrega o logo e exibe o t√≠tulo principal usando st.columns para melhor layout."""
    try:
        # Tenta carregar a imagem da logo (AGORA .PNG)
        logo = Image.open(LOGO_FILENAME)
        
        # Cria colunas para o layout do cabe√ßalho: 1 para o logo (pequeno) e 6 para o t√≠tulo
        col1, col2 = st.columns([1, 6])
        
        with col1:
            # Exibe a logo com largura de 100px
            st.image(logo, width=100)
            
        with col2:
            # Exibe o t√≠tulo principal do projeto
            st.title("An√°lise Financeira Inteligente")
            
        # Adiciona uma linha horizontal para separar o cabe√ßalho do conte√∫do principal
        st.markdown("---")
        
    except FileNotFoundError:
        st.title("An√°lise Financeira Inteligente")
        st.warning(f"Aten√ß√£o: O arquivo da logo '{LOGO_FILENAME}' n√£o foi encontrado. O t√≠tulo √© exibido sozinho.")
        st.markdown("---")
    except Exception as e:
        st.title("An√°lise Financeira Inteligente")
        st.error(f"Erro ao carregar a logo: {e}")
        st.markdown("---")


# --- 5. INTERFACE STREAMLIT ---

# 5.1. CABE√áALHO PERSONALIZADO COM LOGO
load_header()

st.markdown("Fa√ßa o upload de **todos** os extratos banc√°rios em PDF para extra√ß√£o estruturada de dados e gera√ß√£o de um relat√≥rio de an√°lise financeira consolidada.")

# AJUSTADO: Permite m√∫ltiplos arquivos
uploaded_files = st.file_uploader(
    "Selecione os arquivos PDF dos seus extratos banc√°rios",
    type="pdf",
    accept_multiple_files=True,
    help="Os PDFs devem ter texto selecion√°vel (n√£o ser imagens escaneadas). Voc√™ pode selecionar m√∫ltiplos arquivos de contas diferentes."
)

if uploaded_files: # Verifica se h√° arquivos
    
    # Bot√£o para iniciar a an√°lise
    if st.button(f"Executar An√°lise Inteligente ({len(uploaded_files)} arquivos)", key="analyze_btn"):
        
        # Estruturas para agrega√ß√£o
        todas_transacoes = []
        relatorios_combinados = ""
        saldos_finais = 0.0
        
        # 1. Loop sobre cada arquivo e chama a an√°lise
        with st.spinner("Processando todos os extratos..."):
            for i, uploaded_file in enumerate(uploaded_files):
                st.info(f"Analisando arquivo {i+1} de {len(uploaded_files)}: **{uploaded_file.name}**")
                
                pdf_bytes = uploaded_file.getvalue()
                dados_dict = analisar_extrato(pdf_bytes, uploaded_file.name)

                # Agrega√ß√£o
                todas_transacoes.extend(dados_dict['transacoes'])
                saldos_finais += dados_dict['saldo_final']
                
                relatorios_combinados += (
                    f"\n\n---\n\n## Relat√≥rio Individual: {uploaded_file.name}\n\n"
                    f"{dados_dict['relatorio_analise']}"
                )
        
        # 2. Consolida√ß√£o final
        df_transacoes = pd.DataFrame(todas_transacoes)
        
        # 3. C√°lculos de KPI consolidados
        if not df_transacoes.empty:
            total_credito = df_transacoes[df_transacoes['tipo_movimentacao'] == 'CREDITO']['valor'].sum()
            total_debito = df_transacoes[df_transacoes['tipo_movimentacao'] == 'DEBITO']['valor'].sum()
            saldo_periodo = total_credito - total_debito
            
            st.success(f"‚úÖ Extra√ß√£o e An√°lise Conclu√≠das com Sucesso! {len(todas_transacoes)} transa√ß√µes agregadas de {len(uploaded_files)} contas.")
        else:
            total_credito = 0
            total_debito = 0
            saldo_periodo = 0
            st.warning("Nenhuma transa√ß√£o v√°lida foi extra√≠da de todos os arquivos.")


        # --- Exibi√ß√£o de KPIs Consolidados ---
        st.markdown("## Resumo Financeiro CONSOLIDADO do Per√≠odo")
        kpi_col1, kpi_col2, kpi_col3, kpi_col4 = st.columns(4)
        
        with kpi_col1:
            st.markdown('<div class="kpi-container">', unsafe_allow_html=True)
            st.metric("Total de Cr√©ditos (Consolidado)", f"R$ {total_credito:,.2f}")
            st.markdown('</div>', unsafe_allow_html=True)

        with kpi_col2:
            st.markdown('<div class="kpi-container">', unsafe_allow_html=True)
            st.metric("Total de D√©bitos (Consolidado)", f"R$ {total_debito:,.2f}")
            st.markdown('</div>', unsafe_allow_html=True)

        with kpi_col3:
            st.markdown('<div class="kpi-container">', unsafe_allow_html=True)
            # Determina a cor do resultado do per√≠odo
            delta_color = "normal" if saldo_periodo >= 0 else "inverse"
            st.metric("Resultado do Per√≠odo (Consolidado)", f"R$ {saldo_periodo:,.2f}", delta_color=delta_color)
            st.markdown('</div>', unsafe_allow_html=True)

        with kpi_col4:
            st.markdown('<div class="kpi-container">', unsafe_allow_html=True)
            # Nota: O saldo final somado pode ser impreciso e deve ser usado com cautela.
            st.metric("Soma dos Saldos Finais", f"R$ {saldos_finais:,.2f}")
            st.markdown('</div>', unsafe_allow_html=True)


        # --- Apresenta√ß√£o de Resultados (Relat√≥rio e Tabela) ---
        
        st.markdown("---")
        
        col_relatorio, col_tabela = st.columns([1, 1])

        with col_relatorio:
            st.subheader("Relat√≥rios de An√°lise Detalhada (Por Extrato)")
            # O relat√≥rio agora √© a concatena√ß√£o de todas as an√°lises
            st.markdown(relatorios_combinados)

        with col_tabela:
            st.subheader("Dados Extra√≠dos e Estruturados (Consolidado)")
            # Exibe o DataFrame Consolidado
            st.dataframe(
                df_transacoes, 
                use_container_width=True,
                column_config={
                    "valor": st.column_config.NumberColumn("Valor (R$)", format="R$ %0.2f"),
                }
            )

        st.markdown("---")
        
# 5.2. RODAP√â COM LOGO E INFORMA√á√ïES (AJUSTADO PARA ARQUIVO LOCAL)

st.markdown("---") # Linha divis√≥ria para o rodap√©
try:
    # 1. Tenta carregar a imagem local (AGORA .PNG)
    footer_logo = Image.open(LOGO_FILENAME)
    
    # 2. Cria colunas para o rodap√©: uma pequena para a logo e o restante para o texto
    footer_col1, footer_col2 = st.columns([1, 4]) 
    
    with footer_col1:
        # Exibe a logo (tamanho reduzido para rodap√©)
        st.image(footer_logo, width=40)
        
    with footer_col2:
        # Exibe o texto de informa√ß√£o (com um pequeno padding para alinhar com o logo)
        st.markdown(
            """
            <p style="font-size: 0.8rem; color: #6c757d; margin: 0; padding-top: 5px;">
                An√°lise de Extrato Empresarial | Intelig√™ncia Financeira Aplicada
            </p>
            """,
            unsafe_allow_html=True
        )
        
except FileNotFoundError:
    # Fallback se o arquivo local n√£o for encontrado
    st.markdown(
        """
        <p style="font-size: 0.8rem; color: #6c757d; margin: 0; padding-top: 10px;">
            An√°lise de Extrato Empresarial | Intelig√™ncia Financeira Aplicada
            (Logo do rodap√© n√£o encontrada.)
        </p>
        """,
        unsafe_allow_html=True
    )
except Exception as e:
    st.error(f"Erro ao carregar a logo do rodap√©: {e}")


