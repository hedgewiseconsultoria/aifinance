import streamlit as st
import pandas as pd
import json
import io
from PIL import Image
from pydantic import BaseModel, Field
from typing import List, Optional
from google import genai
from google.genai import types
import calendar

# --- FUN√á√ÉO DE FORMATA√á√ÉO BRL (MANTIDA) ---
def formatar_brl(valor: float) -> str:
    """
    Formata um valor float para a moeda Real Brasileiro (R$ xx.xxx,xx).
    """
    # Usa a formata√ß√£o nativa (locale) com uma abordagem manual simples
    # para garantir a portabilidade do separador de milhares (ponto) 
    # e separador decimal (v√≠rgula).
    valor_us = f"{valor:,.2f}"
    
    # 1. Troca o separador de milhares US (v√≠rgula) por um tempor√°rio
    valor_brl = valor_us.replace(",", "TEMP_SEP")
    
    # 2. Troca o separador decimal US (ponto) por v√≠rgula BR
    valor_brl = valor_brl.replace(".", ",")
    
    # 3. Troca o separador tempor√°rio por ponto BR (milhares)
    valor_brl = valor_brl.replace("TEMP_SEP", ".")
    
    return "R$ " + valor_brl
# --- FIM FUN√á√ÉO DE FORMATA√á√ÉO BRL ---


# --- 1. CONFIGURA√á√ÉO DE SEGURAN√áA E TEMA ---

# Cores baseadas na logo Hedgewise
PRIMARY_COLOR = "#0A2342"   # Azul Marinho Escuro (para bot√µes, links)
SECONDARY_COLOR = "#000000" # Preto (para t√≠tulos e texto principal)
BACKGROUND_COLOR = "#F0F2F6" # Cinza Claro (fundo sutil)
ACCENT_COLOR = "#007BFF" # Azul de Destaque para Fluxo Positivo
NEGATIVE_COLOR = "#DC3545" # Vermelho para Fluxo Negativo
FINANCING_COLOR = "#FFC107" # Amarelo/Dourado para Financiamento

# Nome do arquivo da logo no formato PNG
LOGO_FILENAME = "logo_hedgewise.png" 

st.set_page_config(
    page_title="Hedgewise | An√°lise Financeira Inteligente",
    page_icon="üìà",
    layout="wide"
)

# Adiciona CSS customizado para o tema
st.markdown(
    f"""
    <style>
        /* Estilo para o Bot√£o Principal */
        .stButton>button {{
            background-color: {PRIMARY_COLOR};
            color: white;
            border-radius: 8px;
            padding: 10px 20px;
            font-weight: bold;
            border: none;
            transition: background-color 0.3s;
        }}
        .stButton>button:hover {{
            background-color: #1C3757; 
            color: white;
        }}
        /* Fundo da Aplica√ß√£o */
        .stApp {{
            background-color: {BACKGROUND_COLOR};
        }}
        /* Header Principal */
        .main-header {{
            color: {SECONDARY_COLOR};
            font-size: 2.5em;
            padding-bottom: 10px;
        }}
        /* Container dos Widgets/KPIs - Estilo de Card Profissional */
        .kpi-container {{
            background-color: white;
            padding: 20px;
            border-radius: 12px;
            box-shadow: 0 6px 15px 0 rgba(0, 0, 0, 0.08); /* Sombra mais suave */
            margin-bottom: 20px;
            height: 100%; /* Garante altura uniforme */
        }}
        /* Estilos de M√©tricas */
        [data-testid="stMetricLabel"] label {{
            font-weight: 600 !important;
            color: #6c757d; /* Texto cinza suave para a label */
        }}
        [data-testid="stMetricValue"] {{
            font-size: 1.8em !important;
            color: {SECONDARY_COLOR};
        }}
        /* Estilo para Abas (Tabs) */
        button[data-baseweb="tab"] {{
            color: #6c757d;
            border-bottom: 2px solid transparent;
            font-weight: 600;
        }}
        button[data-baseweb="tab"][aria-selected="true"] {{
            color: {PRIMARY_COLOR};
            border-bottom: 3px solid {PRIMARY_COLOR} !important;
        }}
        /* T√≠tulos */
        h2 {{
            color: {PRIMARY_COLOR};
            border-left: 5px solid {PRIMARY_COLOR};
            padding-left: 10px;
            margin-top: 20px;
            margin-bottom: 20px;
        }}
    </style>
    """,
    unsafe_allow_html=True
)

# Inicializa o estado da sess√£o
if 'df_transacoes_editado' not in st.session_state:
    st.session_state['df_transacoes_editado'] = pd.DataFrame()
if 'relatorio_consolidado' not in st.session_state:
    st.session_state['relatorio_consolidado'] = "Aguardando an√°lise de dados..."
if 'contexto_adicional' not in st.session_state:
    st.session_state['contexto_adicional'] = ""

# Inicializa o cliente Gemini
try:
    # Tenta carregar a chave de API dos secrets do Streamlit Cloud
    api_key = st.secrets["GEMINI_API_KEY"]
    client = genai.Client(api_key=api_key)
except (KeyError, AttributeError):
    st.error("ERRO: Chave 'GEMINI_API_KEY' n√£o encontrada nos secrets do Streamlit. Por favor, configure-a para rodar a aplica√ß√£o.")
    st.stop()


# --- 2. DEFINI√á√ÉO DO SCHEMA PYDANTIC (Estrutura de Sa√≠da √öNICA E OTIMIZADA) ---

class Transacao(BaseModel):
    """Representa uma √∫nica transa√ß√£o no extrato banc√°rio."""
    data: str = Field(
        # OTIMIZA√á√ÉO: Descri√ß√£o mais curta
        description="A data da transa√ß√£o no formato 'DD/MM/AAAA'."
    )
    descricao: str = Field(
        description="Descri√ß√£o detalhada da transa√ß√£o."
    )
    valor: float = Field(
        description="O valor num√©rico da transa√ß√£o. Sempre positivo."
    )
    tipo_movimentacao: str = Field(
        description="Classifica√ß√£o da movimenta√ß√£o: 'DEBITO' ou 'CREDITO'."
    )
    categoria_sugerida: str = Field(
        # OTIMIZA√á√ÉO: Exemplos de categorias mais concisos
        description="Sugest√£o de categoria mais relevante (Ex: Alimenta√ß√£o, Sal√°rio, Investimento, Servi√ßo)."
    )
    categoria_dcf: str = Field( 
        description="Classifica√ß√£o DCF: 'OPERACIONAL', 'INVESTIMENTO' ou 'FINANCIAMENTO'."
    )
    entidade: str = Field(
        description="Classifica√ß√£o bin√°ria: 'EMPRESARIAL' ou 'PESSOAL'."
    )

class AnaliseCompleta(BaseModel):
    """Cont√©m a lista de transa√ß√µes E o relat√≥rio de an√°lise inicial."""
    transacoes: List[Transacao] = Field(
        description="Uma lista de objetos 'Transacao' extra√≠dos do documento."
    )
    relatorio_inicial: str = Field(
        # Instru√ß√£o para um relat√≥rio inicial conciso (confirma√ß√£o)
        description="Confirma√ß√£o de extra√ß√£o dos dados deste extrato. Use: 'Extra√ß√£o conclu√≠da. Saldo final: [Valor Formatado em BRL].'"
    )
    saldo_final: float = Field(
        description="O saldo final da conta no extrato. Use zero se n√£o for encontrado."
    )


# --- 3. FUN√á√ÉO DE CHAMADA DA API PARA EXTRA√á√ÉO E RELAT√ìRIO INICIAL ---

@st.cache_data(show_spinner=False, hash_funcs={genai.Client: lambda _: None})
def analisar_extrato(pdf_bytes: bytes, filename: str, client: genai.Client) -> dict:
    """Chama a Gemini API para extrair dados estruturados e classificar DCF e Entidade."""
    
    pdf_part = types.Part.from_bytes(data=pdf_bytes, mime_type='application/pdf')

    # PROMPT DE EXTRA√á√ÉO OTIMIZADO (FOCADO E CONCISO)
    prompt_analise = (
        f"Voc√™ √© um especialista em extra√ß√£o e classifica√ß√£o de dados financeiros. "
        f"Extraia todas as transa√ß√µes deste extrato banc√°rio em PDF ('{filename}') e "
        "classifique cada transa√ß√£o rigorosamente nas categorias 'categoria_dcf' (OPERACIONAL, INVESTIMENTO, FINANCIAMENTO) "
        "e 'entidade' (EMPRESARIAL ou PESSOAL). "
        "A maioria das movimenta√ß√µes deve ser EMPRESARIAL, mas retiradas de s√≥cios ou gastos pessoais devem ser PESSOAL. "
        "Preencha a estrutura JSON rigorosamente. Use valor POSITIVO para 'valor' e classifique estritamente como 'DEBITO' ou 'CREDITO'."
    )
    
    config = types.GenerateContentConfig(
        response_mime_type="application/json",
        response_schema=AnaliseCompleta, # NOVO SCHEMA
        temperature=0.2 # Baixa temperatura para foco na extra√ß√£o
    )

    try:
        response = client.models.generate_content(
            model='gemini-2.5-flash', 
            contents=[pdf_part, prompt_analise],
            config=config,
        )
        
        response_json = json.loads(response.text)
        dados_pydantic = AnaliseCompleta(**response_json)
        
        return dados_pydantic.model_dump()
        
    except Exception as e:
        error_message = str(e)
        
        # TRATAMENTO ESPEC√çFICO PARA ERRO DE SOBRECARGA DA API (503 UNAVAILABLE)
        if "503 UNAVAILABLE" in error_message or "model is overloaded" in error_message:
            st.error(f"‚ö†Ô∏è ERRO DE CAPACIDADE DA API: O modelo Gemini est√° sobrecarregado (503 UNAVAILABLE) ao processar {filename}.")
            st.info("Este √© um erro tempor√°rio do servidor da API. Por favor, tente novamente em alguns minutos.")
        else:
            print(f"Erro ao chamar a Gemini API para {filename}: {error_message}")

        return {
            'transacoes': [], 
            'saldo_final': 0.0, 
            'relatorio_inicial': f"**Falha na Extra√ß√£o:** Ocorreu um erro ao processar o arquivo {filename}. Motivo: {error_message}"
        }


# --- 3.1. FUN√á√ÉO DE GERA√á√ÉO DE RELAT√ìRIO CONSOLIDADO (ECON√îMICO) ---

def gerar_relatorio_final_economico(df_transacoes: pd.DataFrame, contexto_adicional: str, client: genai.Client) -> str:
    """Gera o relat√≥rio final, enviando apenas os KPIs e a distribui√ß√£o de fluxo (texto/tabela),
    N√ÉO O JSON COMPLETO do DataFrame, para m√°xima economia de tokens."""
    
    # 1. Pr√©-c√°lculo dos KPIs no Python (Tokens Zero)
    
    # Cria a coluna de Fluxo
    df_transacoes['fluxo'] = df_transacoes.apply(
        lambda row: row['valor'] if row['tipo_movimentacao'] == 'CREDITO' else -row['valor'], 
        axis=1
    )
    
    # Resumo por DCF e Entidade (o que o LLM precisa analisar)
    resumo_dcf = df_transacoes.groupby('categoria_dcf')['fluxo'].sum()
    resumo_entidade = df_transacoes.groupby('entidade')['fluxo'].sum()
    
    # C√°lculo do saldo operacional
    saldo_operacional = resumo_dcf.get('OPERACIONAL', 0.0)
    
    # Gera√ß√£o de texto conciso de contexto para o Prompt
    texto_resumo = f"""
    1. Saldo L√≠quido do Per√≠odo: {formatar_brl(df_transacoes['fluxo'].sum())}
    2. Saldo Operacional (DCF): {formatar_brl(saldo_operacional)}
    3. Resumo por Entidade (Fluxo):
       - Empresarial: {formatar_brl(resumo_entidade.get('EMPRESARIAL', 0.0))}
       - Pessoal (Retiradas): {formatar_brl(resumo_entidade.get('PESSOAL', 0.0))}
    4. Distribui√ß√£o por DCF (Fluxo):
       - Operacional: {formatar_brl(resumo_dcf.get('OPERACIONAL', 0.0))}
       - Investimento: {formatar_brl(resumo_dcf.get('INVESTIMENTO', 0.0))}
       - Financiamento: {formatar_brl(resumo_dcf.get('FINANCIAMENTO', 0.0))}
    """
    
    contexto_prompt = ""
    if contexto_adicional:
        contexto_prompt = f"\n\n--- CONTEXTO ADICIONAL DO EMPREENDEDOR ---\n{contexto_adicional}\n--- FIM DO CONTEXTO ---\n"
        
    # PROMPT DE RELAT√ìRIO OTIMIZADO (FOCADO EM VALOR DE NEG√ìCIOS E CONCIS√ÉO)
    prompt_analise = (
        "Voc√™ √© um consultor financeiro inteligente especializado em PME (Pequenas e M√©dias Empresas). "
        "Sua tarefa √© analisar os KPIs CALCULADOS e CONSOLIDADOS fornecidos abaixo, que j√° incorporam as corre√ß√µes do usu√°rio. "
        "Gere um relat√≥rio EXTREMAMENTE CONCISO e ACION√ÅVEL, com **no m√°ximo 180 palavras**, focado em gest√£o de caixa e sustentabilidade. "
        
        f"{contexto_prompt}"
        
        "√â mandat√≥rio que voc√™ inclua as seguintes an√°lises, separadas por par√°grafos curtos: "
        "1. Desempenho Operacional: Calcule e comente o saldo l√≠quido gerado pela atividade OPERACIONAL (sa√∫de do neg√≥cio). "
        "2. An√°lise Pessoal vs. Empresarial: Comente o impacto do fluxo PESSOAL no caixa. O saldo operacional √© suficiente para cobrir as retiradas? "
        "3. Sugest√µes Estrat√©gicas: Sugest√µes acion√°veis para otimizar o capital de giro, com base nas categorias de maior gasto (se percept√≠vel). "
        "4. Remunera√ß√£o Ideal / Proje√ß√£o: Comente se as retiradas atuais s√£o sustent√°veis e estime um valor ideal de pr√≥-labore mensal para os pr√≥ximos 3 meses, sem comprometer o neg√≥cio."
        
        # INSTRU√á√ÉO ADICIONAL PARA EVITAR PROBLEMAS DE FORMATA√á√ÉO
        "Use apenas texto simples e Markdown b√°sico (como negrito `**`). EVITE listas complexas ou tabelas. Use o formato brasileiro (ponto para milhares e v√≠rgula para decimais) e o prefixo R$."
        
        "\n\n--- DADOS CONSOLIDADOS (KPIs) ---\n"
        f"{texto_resumo}"
    )
    
    config = types.GenerateContentConfig(temperature=0.4)
    
    try:
        response = client.models.generate_content(
            model='gemini-2.5-flash', 
            contents=[prompt_analise], # Chamada muito mais leve (s√≥ texto)
            config=config,
        )
        return response.text
    except Exception as e:
        return f"**Falha na Gera√ß√£o do Relat√≥rio Consolidado:** Ocorreu um erro ao gerar o relat√≥rio anal√≠tico. Motivo: {e}"

# --- 4. FUN√á√ÉO DE CABE√áALHO ---

def load_header():
    """Carrega o logo e exibe o t√≠tulo principal usando st.columns para melhor layout."""
    try:
        # AQUI BUSCA O ARQUIVO .PNG
        logo = Image.open(LOGO_FILENAME)
        
        col1, col2 = st.columns([1, 6])
        
        with col1:
            st.image(logo, width=100)
            
        with col2:
            st.markdown('<div class="main-header">An√°lise Financeira Inteligente</div>', unsafe_allow_html=True)
            st.caption("O horizonte do pequeno empreendedor")
            
        st.markdown("---")
        
    except FileNotFoundError:
        st.title("Hedgewise | An√°lise Financeira Inteligente")
        st.warning(f"Aten√ß√£o: O arquivo da logo '{LOGO_FILENAME}' n√£o foi encontrado. O t√≠tulo √© exibido sozinho.")
        st.markdown("---")
    except Exception as e:
        st.title("Hedgewise | An√°lise Financeira Inteligente")
        st.error(f"Erro ao carregar a logo: {e}")
        st.markdown("---")


# --- 5. FUN√á√ÉO PARA CRIAR GR√ÅFICOS DO DASHBOARD (AJUSTE DO GR√ÅFICO OPERACIONAL VS PESSOAL) ---

def criar_dashboard(df: pd.DataFrame):
    """
    Cria os gr√°ficos de fluxo de caixa mensal, focando no comparativo Operacional vs. Pessoal.
    """
    st.subheader("Dashboard: Fluxo de Caixa Mensal por Entidade e DCF")
    
    if df.empty:
        st.info("Nenhum dado dispon√≠vel para o dashboard. Por favor, analise e confirme as transa√ß√µes na aba anterior.")
        return

    try:
        # 1. Pr√©-processamento e C√°lculo do Fluxo
        df['data'] = pd.to_datetime(df['data'], errors='coerce', dayfirst=True) 
        df.dropna(subset=['data'], inplace=True) # Remove linhas com data inv√°lida
        
        # Cria a coluna de Fluxo: Cr√©dito - D√©bito
        df['fluxo'] = df.apply(
            lambda row: row['valor'] if row['tipo_movimentacao'] == 'CREDITO' else -row['valor'], 
            axis=1
        )

        # FIX: Criar a coluna mes_ano_str aqui para ser usada nos gr√°ficos
        df['mes_ano_str'] = df['data'].dt.to_period('M').astype(str) # Converte para Period e depois para String (YYYY-MM)
        
        # 2. Agrupamento e Pivota√ß√£o dos Dados para o KPI FOCADO: Operacional L√≠quido vs. Pessoal
        
        # Filtra e agrupa o Fluxo Operacional (Gera√ß√£o de Caixa da Atividade Principal)
        df_operacional = df[df['categoria_dcf'] == 'OPERACIONAL']
        df_operacional_mensal = df_operacional.groupby('mes_ano_str')['fluxo'].sum().reset_index()
        df_operacional_mensal.rename(columns={'fluxo': 'OPERACIONAL_LIQUIDO'}, inplace=True)

        # Filtra e agrupa o Fluxo Pessoal (Retiradas, o peso do gasto pessoal)
        df_pessoal = df[df['entidade'] == 'PESSOAL']
        df_pessoal_mensal = df_pessoal.groupby('mes_ano_str')['fluxo'].sum().reset_index()
        df_pessoal_mensal.rename(columns={'fluxo': 'FLUXO_PESSOAL'}, inplace=True)
        
        # Junta os dois DataFrames
        df_kpi_comparativo = pd.merge(
            df_operacional_mensal, 
            df_pessoal_mensal, 
            on='mes_ano_str', 
            how='outer'
        ).fillna(0)
        
        # Garante a ordena√ß√£o
        df_kpi_comparativo.sort_values(by='mes_ano_str', inplace=True)
        df_kpi_comparativo.set_index('mes_ano_str', inplace=True)
        
        # 3. Cria√ß√£o do Primeiro Gr√°fico (KPI FOCADO: Operacional vs. Pessoal) - GR√ÅFICO DE BARRAS AGRUPADAS
        st.markdown("### üìä Gera√ß√£o de Caixa: O Operacional Suporta o Pessoal?")
        st.info("Este gr√°fico compara o resultado l√≠quido da sua atividade principal (fluxo 'OPERACIONAL') com o total de retiradas e gastos pessoais ('FLUXO PESSOAL') a cada m√™s.")
        
        st.bar_chart(
            df_kpi_comparativo,
            y=['OPERACIONAL_LIQUIDO', 'FLUXO_PESSOAL'], 
            # Cores: Operacional Positivo (Azul de Destaque) e Pessoal Negativo (Vermelho)
            color=[ACCENT_COLOR, NEGATIVE_COLOR], 
            height=350
        )
        st.caption("O ideal √© que o **OPERACIONAL L√çQUIDO** seja significativamente maior (positivo) do que o **FLUXO PESSOAL** (geralmente negativo) para sustentar o capital de giro.")
        
        st.markdown("---")


        # 4. An√°lise DCF (Gr√°fico de Linhas - MANTIDO)
        st.markdown("### Comparativo Mensal de Fluxo de Caixa pelo M√©todo DCF (Operacional, Investimento, Financiamento)")
        
        # Agrupamento DCF - Agora usando 'mes_ano_str' que existe em 'df'
        df_dcf_agrupado = df.groupby(['mes_ano_str', 'categoria_dcf'])['fluxo'].sum().reset_index()
        
        # Pivota a tabela para ter categorias DCF como colunas
        df_dcf_pivot = df_dcf_agrupado.pivot(index='mes_ano_str', columns='categoria_dcf', values='fluxo').fillna(0)

        # Garante que as colunas cr√≠ticas existam e define a ordem
        dcf_columns = ['OPERACIONAL', 'INVESTIMENTO', 'FINANCIAMENTO']
        for col in dcf_columns:
            if col not in df_dcf_pivot.columns:
                df_dcf_pivot[col] = 0.0
                
        # Define as cores para o gr√°fico de linhas DCF
        DCF_COLORS = [
            PRIMARY_COLOR,  # OPERACIONAL (Azul Escuro)
            ACCENT_COLOR,   # INVESTIMENTO (Azul de Destaque)
            FINANCING_COLOR # FINANCIAMENTO (Amarelo/Warning)
        ]

        st.line_chart(
            df_dcf_pivot[dcf_columns], # Garante a ordem das colunas
            color=DCF_COLORS,
            height=350
        )
        st.caption("O fluxo **OPERACIONAL** √© o principal indicador de sa√∫de (o neg√≥cio em si). Fluxo de **INVESTIMENTO** mostra o gasto em ativos ou vendas de ativos. Fluxo de **FINANCIAMENTO** mostra entrada/sa√≠da de capital de terceiros ou s√≥cios.")


    except Exception as e:
        import traceback
        st.error(f"Erro ao gerar o dashboard: {e}")
        st.code(f"Detalhes do erro:\n{traceback.format_exc()}")


# --- 6. INTERFACE STREAMLIT PRINCIPAL ---

load_header()

tab1, tab2 = st.tabs(["üìä An√°lise e Corre√ß√£o de Dados", "üìà Dashboard & Fluxo de Caixa"])

with tab1:
    st.markdown("## 1. Upload e Extra√ß√£o de Dados")
    st.markdown("Fa√ßa o upload dos extratos em PDF. O sistema ir√° extrair as transa√ß√µes e classific√°-las em DCF e Entidade (Empresarial/Pessoal).")

    col_upload, col_contexto = st.columns([1, 1])
    
    with col_upload:
        # Permite m√∫ltiplos arquivos
        uploaded_files = st.file_uploader(
            "Selecione os arquivos PDF dos seus extratos banc√°rios",
            type="pdf",
            accept_multiple_files=True,
            key="pdf_uploader",
            help="Os PDFs devem ter texto selecion√°vel. Voc√™ pode selecionar m√∫ltiplos arquivos para uma an√°lise consolidada."
        )

    with col_contexto:
        # Caixa de texto para contexto adicional
        contexto_adicional_input = st.text_area(
            "2. Contexto Adicional para a An√°lise (Opcional)",
            value=st.session_state.get('contexto_adicional', ''), 
            placeholder="Ex: 'Todos os dep√≥sitos em dinheiro (cash) s√£o provenientes de vendas diretas.'",
            key="contexto_input",
            help="Use este campo para fornecer √† IA informa√ß√µes contextuais que n√£o est√£o nos extratos."
        )


    # Verifica se o contexto foi alterado e o atualiza no estado
    if contexto_adicional_input != st.session_state.get('contexto_adicional', ''):
        st.session_state['contexto_adicional'] = contexto_adicional_input


    if uploaded_files: # Verifica se h√° arquivos
        
        # Bot√£o para iniciar a an√°lise
        if st.button(f"3. Executar Extra√ß√£o e Classifica√ß√£o ({len(uploaded_files)} arquivos)", key="analyze_btn"):
            
            # --- Fase de Extra√ß√£o ---
            todas_transacoes = []
            saldos_finais = 0.0
            
            extraction_status = st.status("Iniciando extra√ß√£o e classifica√ß√£o...", expanded=True)
            
            for i, uploaded_file in enumerate(uploaded_files):
                extraction_status.write(f"Extraindo dados do arquivo {i+1} de {len(uploaded_files)}: **{uploaded_file.name}**")
                
                pdf_bytes = uploaded_file.getvalue()
                with extraction_status:
                    dados_dict = analisar_extrato(pdf_bytes, uploaded_file.name, client)

                todas_transacoes.extend(dados_dict['transacoes'])
                saldos_finais += dados_dict['saldo_final']
            
            # 4. Consolida√ß√£o e salvamento no estado da sess√£o
            df_transacoes = pd.DataFrame(todas_transacoes)
            
            if df_transacoes.empty:
                extraction_status.error("‚ùå Nenhuma transa√ß√£o v√°lida foi extra√≠da. Verifique as mensagens de erro acima.")
                st.session_state['df_transacoes_editado'] = pd.DataFrame()
            else:
                extraction_status.update(label=f"‚úÖ Extra√ß√£o de {len(todas_transacoes)} transa√ß√µes conclu√≠da!", state="complete", expanded=False)
                
                # Formata√ß√£o e ordena√ß√£o inicial
                df_transacoes['valor'] = pd.to_numeric(df_transacoes['valor'], errors='coerce').fillna(0)
                
                # Converte para datetime e mant√©m o tipo nativo do Pandas.
                df_transacoes['data'] = pd.to_datetime(df_transacoes['data'], errors='coerce', dayfirst=True)
                
                # Limpeza e garantia de tipos (Robustez contra dados faltantes do Gemini)
                df_transacoes['tipo_movimentacao'] = df_transacoes['tipo_movimentacao'].fillna('DEBITO')
                df_transacoes['entidade'] = df_transacoes['entidade'].fillna('EMPRESARIAL') # Default mais seguro
                df_transacoes['categoria_dcf'] = df_transacoes['categoria_dcf'].fillna('OPERACIONAL')
                
                # Armazena o DataFrame extra√≠do para a edi√ß√£o
                st.session_state['df_transacoes_editado'] = df_transacoes
                st.session_state['saldos_finais'] = saldos_finais
                
                # Limpa o relat√≥rio antigo
                st.session_state['relatorio_consolidado'] = "Aguardando gera√ß√£o do relat√≥rio..."
                
                # For√ßa uma reexecu√ß√£o para renderizar a tabela de edi√ß√£o
                st.rerun()

        
        # --- Fase de Edi√ß√£o e Gera√ß√£o de Relat√≥rio ---
        
        if not st.session_state['df_transacoes_editado'].empty:
            
            st.markdown("---")
            st.markdown("## 4. Revis√£o e Corre√ß√£o Manual dos Dados")
            st.info("‚ö†Ô∏è **IMPORTANTE:** Revise as colunas **'Entidade'** (Empresarial/Pessoal) e **'Classifica√ß√£o DCF'** e corrija manualmente qualquer erro. Estes dados corrigidos ser√£o usados no relat√≥rio e Dashboard.")
            
            # st.data_editor permite a edi√ß√£o interativa dos dados
            edited_df = st.data_editor(
                st.session_state['df_transacoes_editado'],
                width='stretch',
                column_config={
                    "data": st.column_config.DateColumn("Data", format="YYYY-MM-DD", required=True),
                    "valor": st.column_config.NumberColumn("Valor (R$)", format="R$ %0.2f", required=True), 
                    "tipo_movimentacao": st.column_config.SelectboxColumn(
                        "Tipo", 
                        options=["CREDITO", "DEBITO"], 
                        required=True
                    ),
                    "categoria_dcf": st.column_config.SelectboxColumn(
                        "Classifica√ß√£o DCF", 
                        options=["OPERACIONAL", "INVESTIMENTO", "FINANCIAMENTO"], 
                        required=True
                    ),
                    "entidade": st.column_config.SelectboxColumn(
                        "Entidade", 
                        options=["EMPRESARIAL", "PESSOAL"], 
                        required=True
                    ),
                },
                num_rows="dynamic",
                key="data_editor_transacoes"
            )

            if st.button("5. Gerar Relat√≥rio e Dashboard com Dados Corrigidos", key="generate_report_btn"):
                
                # 1. Armazena a vers√£o editada no estado
                st.session_state['df_transacoes_editado'] = edited_df
                
                # 2. Gera√ß√£o do Relat√≥rio Consolidado (CHAMADA √öNICA E ECON√îMICA)
                with st.spinner("Gerando Relat√≥rio de An√°lise Consolidada (com dados corrigidos e KPIs calculados no Python)..."):
                    relatorio_consolidado = gerar_relatorio_final_economico(
                        edited_df, 
                        st.session_state.get('contexto_adicional', ''), 
                        client
                    )
                
                # 3. Armazena o relat√≥rio e for√ßa o rec√°lculo dos KPIs
                st.session_state['relatorio_consolidado'] = relatorio_consolidado
                
                st.success("Relat√≥rio gerado! Acesse a aba **Dashboard & Fluxo de Caixa** para ver os gr√°ficos e a an√°lise completa.")
            
            
            elif uploaded_files and 'df_transacoes_editado' not in st.session_state:
                st.info("Pressione o bot√£o 'Executar Extra√ß√£o e Classifica√ß√£o' para iniciar a an√°lise.")

with tab2:
    st.markdown("## 6. Relat√≥rios Gerenciais e Dashboard")

    if not st.session_state['df_transacoes_editado'].empty:
        df_final = st.session_state['df_transacoes_editado']
        
        # --- Exibi√ß√£o de KPIs Consolidados ---
        
        # Rec√°lculo dos KPIs com os dados mais recentes (editados)
        total_credito = df_final[df_final['tipo_movimentacao'] == 'CREDITO']['valor'].sum()
        total_debito = df_final[df_final['tipo_movimentacao'] == 'DEBITO']['valor'].sum()
        saldo_periodo = total_credito - total_debito
        
        st.markdown("### Resumo Financeiro CONSOLIDADO do Per√≠odo (P√≥s-Corre√ß√£o)")
        kpi_col1, kpi_col2, kpi_col3 = st.columns(3)
        
        with kpi_col1:
            st.markdown('<div class="kpi-container">', unsafe_allow_html=True)
            st.metric("Total de Cr√©ditos", formatar_brl(total_credito)) 
            st.markdown('</div>', unsafe_allow_html=True)

        with kpi_col2:
            st.markdown('<div class="kpi-container">', unsafe_allow_html=True)
            st.metric("Total de D√©bitos", formatar_brl(total_debito))
            st.markdown('</div>', unsafe_allow_html=True)

        with kpi_col3:
            st.markdown('<div class="kpi-container">', unsafe_allow_html=True)
            delta_color = "normal" if saldo_periodo >= 0 else "inverse"
            st.metric("Resultado do Per√≠odo", formatar_brl(saldo_periodo), delta_color=delta_color)
            st.markdown('</div>', unsafe_allow_html=True)
        
        st.markdown("---")

        # 6.1. Exibe o Relat√≥rio de An√°lise (COM AJUSTE DE FORMATA√á√ÉO)
        if st.session_state['relatorio_consolidado'] and st.session_state['relatorio_consolidado'] not in ["Aguardando an√°lise de dados...", "Aguardando gera√ß√£o do relat√≥rio..."]:
            st.subheader("Relat√≥rio de An√°lise Consolidada (Texto)")
            
            # **AJUSTE DE FORMATA√á√ÉO**
            # Usamos um bloco de Markdown com estilo para controlar a exibi√ß√£o do texto
            st.markdown(
                f"""
                <div style="background-color: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.05);">
                    {st.session_state['relatorio_consolidado']}
                </div>
                """,
                unsafe_allow_html=True
            )
            st.markdown("---")
        else:
            st.warning("Pressione o bot√£o **'Gerar Relat√≥rio e Dashboard com Dados Corrigidos'** na aba anterior para gerar a an√°lise em texto.")
            st.markdown("---")

        # 6.2. Cria os Gr√°ficos
        criar_dashboard(df_final)
    else:
        st.warning("Nenhum dado processado encontrado. Volte para a aba **An√°lise e Corre√ß√£o de Dados** e execute a extra√ß√£o dos seus arquivos PDF.")

# --- Rodap√© ---
st.markdown("---")
try:
    footer_logo = Image.open(LOGO_FILENAME)
    
    footer_col1, footer_col2 = st.columns([1, 4]) 
    
    with footer_col1:
        st.image(footer_logo, width=40)
        
    with footer_col2:
        st.markdown(
            """
            <p style="font-size: 0.8rem; color: #6c757d; margin: 0; padding-top: 5px;">
                An√°lise de Extrato Empresarial | Dados extra√≠dos e classificados com IA.
            </p>
            """,
            unsafe_allow_html=True
        )
        
except Exception:
    st.markdown(
        """
        <p style="font-size: 0.8rem; color: #6c757d; margin: 0; padding-top: 10px;">
            An√°lise de Extrato Empresarial | Dados extra√≠dos e classificados com IA.
        </p>
        """,
        unsafe_allow_html=True
    )
