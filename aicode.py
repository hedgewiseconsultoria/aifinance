import streamlit as st
import pandas as pd
import json
import io
from PIL import Image
from pydantic import BaseModel, Field
from typing import List, Optional
from google import genai
from google.genai import types

# --- 1. CONFIGURA√á√ÉO DE SEGURAN√áA E TEMA ---

# Cores baseadas na logo Hedgewise
PRIMARY_COLOR = "#0A2342"   # Azul Marinho Escuro (para bot√µes, links)
SECONDARY_COLOR = "#000000" # Preto (para t√≠tulos e texto principal)
BACKGROUND_COLOR = "#F0F2F6" # Cinza Claro (fundo sutil)
ACCENT_COLOR = "#007BFF" # Azul de Destaque para Fluxo Positivo
NEGATIVE_COLOR = "#DC3545" # Vermelho para Fluxo Negativo

# Nome do arquivo da logo dispon√≠vel localmente (AJUSTADO PARA .PNG)
LOGO_FILENAME = "logo_hedgewise.png" 
LOGO_URL = "logo_hedgewise.png" 

if 'df_transacoes' not in st.session_state:
    st.session_state.df_transacoes = pd.DataFrame()
if 'relatorio_consolidado' not in st.session_state:
    st.session_state.relatorio_consolidado = ""
if 'total_credito' not in st.session_state:
    st.session_state.total_credito = 0.0
if 'total_debito' not in st.session_state:
    st.session_state.total_debito = 0.0
if 'saldo_periodo' not in st.session_state:
    st.session_state.saldo_periodo = 0.0

st.set_page_config(
    page_title="Hedgewise | An√°lise Financeira Inteligente",
    page_icon="üìà",
    layout="wide"
)

# Adiciona CSS customizado para o tema
st.markdown(
    f"""
    <style>
        /* Estilo para o Bot√£o Principal */
        .stButton>button {{
            background-color: {PRIMARY_COLOR};
            color: white;
            border-radius: 8px;
            padding: 10px 20px;
            font-weight: bold;
            border: none;
            transition: background-color 0.3s;
        }}
        .stButton>button:hover {{
            background-color: #1C3757; 
            color: white;
        }}
        /* Fundo da Aplica√ß√£o */
        .reportview-container {{
            background: {BACKGROUND_COLOR};
        }}
        /* Header Principal (Agora usado apenas para a linha divis√≥ria) */
        .main-header {{
            color: {SECONDARY_COLOR};
            font-size: 2.5em;
            padding-bottom: 10px;
        }}
        /* Container dos Widgets/KPIs - Estilo de Card Profissional */
        .kpi-container {{
            background-color: white;
            padding: 20px;
            border-radius: 12px;
            box-shadow: 0 6px 15px 0 rgba(0, 0, 0, 0.08); /* Sombra mais suave */
            margin-bottom: 20px;
            height: 100%; /* Garante altura uniforme */
        }}
        /* Estilos de M√©tricas */
        .stMetric label {{
            font-weight: 600 !important;
            color: #6c757d; /* Texto cinza suave para a label */
        }}
        .stMetric div[data-testid="stMetricValue"] {{
            font-size: 1.8em !important;
            color: {SECONDARY_COLOR};
        }}
        
        /* O CSS do rodap√© fixo foi removido para usar widgets nativos (st.columns) */
    </style>
    """,
    unsafe_allow_html=True
)

# Inicializa o cliente Gemini
try:
    # Tenta carregar a chave de API dos secrets do Streamlit Cloud
    api_key = st.secrets["GEMINI_API_KEY"]
    client = genai.Client(api_key=api_key)
except (KeyError, AttributeError):
    st.error("ERRO: Chave 'GEMINI_API_KEY' n√£o encontrada nos secrets do Streamlit. Por favor, configure-a para rodar a aplica√ß√£o.")
    st.stop()


# --- 2. DEFINI√á√ÉO DO SCHEMA PYDANTIC (Estrutura de Sa√≠da) ---

class Transacao(BaseModel):
    """Representa uma √∫nica transa√ß√£o no extrato banc√°rio."""
    data: str = Field(
        description="A data da transa√ß√£o no formato 'DD/MM/AAAA' ou 'AAAA-MM-DD'."
    )
    descricao: str = Field(
        description="Descri√ß√£o detalhada da transa√ß√£o, como o nome do estabelecimento ou tipo de servi√ßo."
    )
    valor: float = Field(
        description="O valor num√©rico da transa√ß√£o. Sempre positivo. Ex: 150.75"
    )
    tipo_movimentacao: str = Field(
        description="Classifica√ß√£o da movimenta√ß√£o: 'DEBITO' ou 'CREDITO'."
    )
    categoria_sugerida: str = Field(
        description="Sugest√£o de categoria mais relevante para esta transa√ß√£o (Ex: 'Alimenta√ß√£o', 'Transporte', 'Sal√°rio', 'Investimento', 'Servi√ßos')."
    )
    # NOVO: Campo para a classifica√ß√£o DCF
    categoria_dcf: str = Field( 
        description="Classifica√ß√£o da transa√ß√£o para o Demonstrativo de Fluxo de Caixa (DCF): 'OPERACIONAL', 'INVESTIMENTO' ou 'FINANCIAMENTO'."
    )
    entidade: str = Field(
        description="Classifica√ß√£o da entidade da transa√ß√£o: 'EMPRESARIAL' ou 'PESSOAL'."
    )

class ExtratoBancarioCompleto(BaseModel):
    """Cont√©m a lista de transa√ß√µes e o relat√≥rio de an√°lise."""
    
    transacoes: List[Transacao] = Field(
        description="Uma lista de objetos 'Transacao' extra√≠dos do documento."
    )
    saldo_final: float = Field(
        description="O saldo final da conta no extrato. Use zero se n√£o for encontrado."
    )
    # O relat√≥rio individual foi simplificado para ser apenas uma confirma√ß√£o, 
    # pois a an√°lise avan√ßada ser√° feita de forma consolidada.
    relatorio_analise: str = Field(
        description="Confirma√ß√£o de extra√ß√£o dos dados deste extrato. Use 'Extra√ß√£o de dados conclu√≠da com sucesso.'"
    )


# --- 3. FUN√á√ÉO DE CHAMADA DA API PARA EXTRA√á√ÉO ---

@st.cache_data(show_spinner="Analisando PDF com Gemini (pode demorar at√© 30 segundos)...")
def analisar_extrato(pdf_bytes: bytes, filename: str) -> dict:
    """Chama a Gemini API para extrair dados estruturados e classificar DCF por transa√ß√£o."""
    
    pdf_part = types.Part.from_bytes(data=pdf_bytes, mime_type='application/pdf')

    # Prompt focado em extra√ß√£o e classifica√ß√£o
    prompt_analise = (
        f"Voc√™ √© um especialista em extra√ß√£o e classifica√ß√£o de dados financeiros. "
        f"Seu trabalho √© extrair todas as transa√ß√µes deste extrato banc√°rio em PDF do arquivo '{filename}' e "
        "classificar cada transa√ß√£o rigorosamente em uma 'categoria_dcf' como 'OPERACIONAL', 'INVESTIMENTO' ou 'FINANCIAMENTO'. "
        "N√£o gere relat√≥rios. Preencha apenas a estrutura JSON rigorosamente. "
        "Use sempre o valor positivo para 'valor' e classifique estritamente como 'DEBITO' ou 'CREDITO'."
    )
    
    config = types.GenerateContentConfig(
        response_mime_type="application/json",
        response_schema=ExtratoBancarioCompleto,
        temperature=0.2 # Baixa temperatura para foco na extra√ß√£o
    )

    try:
        response = client.models.generate_content(
            model='gemini-2.5-pro',
            contents=[pdf_part, prompt_analise],
            config=config,
        )
        
        response_json = json.loads(response.text)
        dados_pydantic = ExtratoBancarioCompleto(**response_json)
        
        return dados_pydantic.model_dump()
    
    except Exception as e:
        st.error(f"Erro ao chamar a Gemini API para {filename}: {e}")
        st.info("Verifique se o PDF est√° leg√≠vel e se a API Key est√° configurada corretamente.")
        return {
            'transacoes': [], 
            'saldo_final': 0.0, 
            'relatorio_analise': f"**Falha na Extra√ß√£o:** Ocorreu um erro ao processar o arquivo {filename}. Motivo: {e}"
        }

# --- 3.1. FUN√á√ÉO DE GERA√á√ÉO DE RELAT√ìRIO CONSOLIDADO ---

def gerar_relatorio_consolidado(df_transacoes: pd.DataFrame, contexto_adicional: str) -> str:
    """Gera o relat√≥rio de an√°lise consolidado enviando os dados agregados para o Gemini."""
    
    # Prepara os dados para an√°lise
    # Converte o DataFrame de transa√ß√µes consolidadas para uma string JSON
    transacoes_json = df_transacoes.to_json(orient='records', date_format='iso', indent=2)
    
    # Adiciona o contexto do usu√°rio ao prompt
    contexto_prompt = ""
    if contexto_adicional:
        contexto_prompt = f"\n\n--- CONTEXTO ADICIONAL DO EMPREENDEDOR ---\n{contexto_adicional}\n--- FIM DO CONTEXTO ---\n"
    
    prompt_analise = (
        "Voc√™ √© um analista financeiro de elite, especializado na metodologia do Demonstrativo de Fluxo de Caixa (DCF) para micro e pequenas empresas (PME). "
        "Seu trabalho √© analisar o conjunto de transa√ß√µes CONSOLIDADAS (de m√∫ltiplas contas) fornecido abaixo em JSON. "
        "Todas as transa√ß√µes j√° est√£o classificadas em 'OPERACIONAL', 'INVESTIMENTO' e 'FINANCIAMENTO' (campo 'categoria_dcf'). "
        "Gere um relat√≥rio de an√°lise DIRETA AO PONTO para a gest√£o de caixa da empresa, focado na capacidade de gera√ß√£o de capital e na rela√ß√£o entre gastos empresariais e pessoais. "
        "O relat√≥rio deve ser f√°cil de entender para pequenos empreendedores, evitando jarg√µes excessivamente t√©cnicos. "
        
        f"{contexto_prompt}" # Inclui o contexto adicional aqui
        
        "√â mandat√≥rio que voc√™ inclua as seguintes se√ß√µes: "
        "1. Sum√°rio Executivo Consolidado: Breve resumo sobre a sa√∫de financeira geral no per√≠odo. "
        "2. An√°lise de Fluxo de Caixa DCF: Detalhe o saldo l√≠quido total gerado por cada uma das tr√™s atividades (OPERACIONAL, INVESTIMENTO e FINANCIAMENTO). Este √© o ponto mais importante para o empreendedor. "
        "3. An√°lise de Entidade (Empresarial vs. Pessoal): Apresente o fluxo de caixa total para atividades 'EMPRESARIAL' e 'PESSOAL', comentando sobre a capacidade da empresa de cobrir as despesas pessoais do(s) s√≥cio(s). "
        "4. Principais Tend√™ncias de Gastos: Liste e comente as 3 Categorias de Maior Impacto (baseadas em \'categoria_sugerida\') e sua implica√ß√£o no caixa. \n"
        "5. Sugest√µes Estrat√©gicas: Sugest√µes acion√°veis para otimizar o capital de giro e melhorar o fluxo operacional. \n"
        "Use apenas texto simples e Markdown b√°sico (como negrito `**` e listas). Evite c√≥digos LaTeX ou s√≠mbolos de moeda (R$) em valores monet√°rios no corpo do relat√≥rio, use apenas n√∫meros. "
        "\n\n--- DADOS CONSOLIDADOS (JSON) ---\n"
        f"{transacoes_json}"
    )
    
    config = types.GenerateContentConfig(temperature=0.4)
    
    try:
        response = client.models.generate_content(
            model='gemini-2.5-pro',
            contents=[prompt_analise],
            config=config,
        )
        return response.text
    except Exception as e:
        return f"**Falha na Gera√ß√£o do Relat√≥rio Consolidado:** Ocorreu um erro ao gerar o relat√≥rio anal√≠tico. Motivo: {e}"


# --- 4. FUN√á√ÉO DE CABE√áALHO ---

def load_header():
    """Carrega o logo e exibe o t√≠tulo principal usando st.columns para melhor layout."""
    try:
        # Tenta carregar a imagem da logo (.PNG)
        logo = Image.open(LOGO_FILENAME)
        
        # Cria colunas para o layout do cabe√ßalho: 1 para o logo (pequeno) e 6 para o t√≠tulo
        col1, col2 = st.columns([1, 6])
        
        with col1:
            # Exibe a logo com largura de 100px
            st.image(logo, width=100)
            
        with col2:
            # Exibe o t√≠tulo principal do projeto
            st.title("An√°lise Financeira Inteligente")
            
        # Adiciona uma linha horizontal para separar o cabe√ßalho do conte√∫do principal
        st.markdown("---")
        
    except FileNotFoundError:
        st.title("An√°lise Financeira Inteligente")
        st.warning(f"Aten√ß√£o: O arquivo da logo '{LOGO_FILENAME}' n√£o foi encontrado. O t√≠tulo √© exibido sozinho.")
        st.markdown("---")
    except Exception as e:
        st.title("An√°lise Financeira Inteligente")
        st.error(f"Erro ao carregar a logo: {e}")
        st.markdown("---")


# --- 5. INTERFACE STREAMLIT ---

# 5.1. CABE√áALHO PERSONALIZADO COM LOGO
load_header()

main_tab, dashboard_tab = st.tabs(["An√°lise Principal", "Dashboard de Fluxo de Caixa"])

with main_tab:
    st.markdown("Fa√ßa o upload de **todos** os extratos banc√°rios em PDF para extra√ß√£o estruturada de dados e gera√ß√£o de um relat√≥rio de an√°lise financeira consolidada.")

    uploaded_files = st.file_uploader(
        "Selecione os arquivos PDF dos seus extratos banc√°rios",
        key="file_uploader_main",
        type="pdf",
        accept_multiple_files=True,
        help="Os PDFs devem ter texto selecion√°vel. Voc√™ pode selecionar m√∫ltiplos arquivos de contas diferentes para uma an√°lise consolidada."
    )

    contexto_adicional = st.text_area(
        "Contexto Adicional para a An√°lise (Opcional)",
        placeholder="Ex: 'Todos os dep√≥sitos em dinheiro (cash) s√£o provenientes de vendas diretas e devem ser considerados operacionais.'",
        help="Use este campo para fornecer √† IA informa√ß√µes contextuais que n√£o est√£o nos extratos, como a origem de dep√≥sitos espec√≠ficos."
    )

    if uploaded_files:
        if st.button(f"Executar An√°lise CONSOLIDADA ({len(uploaded_files)} arquivos)", key="analyze_btn"):
            todas_transacoes = []
            saldos_finais = 0.0
            extraction_status = st.empty()
            extraction_status.info("Iniciando extra√ß√£o e classifica√ß√£o DCF por arquivo...")

            for i, uploaded_file in enumerate(uploaded_files):
                extraction_status.info(f"Extraindo dados do arquivo {i+1} de {len(uploaded_files)}: **{uploaded_file.name}**")
                pdf_bytes = uploaded_file.getvalue()
                dados_dict = analisar_extrato(pdf_bytes, uploaded_file.name)
                todas_transacoes.extend(dados_dict['transacoes'])
                saldos_finais += dados_dict['saldo_final']
            
            df_transacoes = pd.DataFrame(todas_transacoes)
            if df_transacoes.empty:
                extraction_status.error("Nenhuma transa√ß√£o v√°lida foi extra√≠da de todos os arquivos. A an√°lise consolidada n√£o pode ser realizada.")
                st.session_state.df_transacoes = pd.DataFrame()
                st.session_state.relatorio_consolidado = "**Falha na An√°lise Consolidada:** Nenhum dado extra√≠do."
            else:
                extraction_status.success(f"‚úÖ Extra√ß√£o de {len(todas_transacoes)} transa√ß√µes conclu√≠da! Gerando relat√≥rio consolidado...")
                st.session_state.df_transacoes = df_transacoes
                st.session_state.total_credito = df_transacoes[df_transacoes['tipo_movimentacao'] == 'CREDITO']['valor'].sum()
                st.session_state.total_debito = df_transacoes[df_transacoes['tipo_movimentacao'] == 'DEBITO']['valor'].sum()
                st.session_state.saldo_periodo = st.session_state.total_credito - st.session_state.total_debito
                with st.spinner("Gerando Relat√≥rio de An√°lise Consolidada..."):
                    st.session_state.relatorio_consolidado = gerar_relatorio_consolidado(df_transacoes, contexto_adicional)
                extraction_status.empty()
                st.success("‚úÖ An√°lise Consolidada Conclu√≠da com Sucesso!")

    if 'df_transacoes' in st.session_state and not st.session_state.df_transacoes.empty:
        st.markdown("## Resumo Financeiro CONSOLIDADO do Per√≠odo")
        kpi_col1, kpi_col2, kpi_col3, kpi_col4 = st.columns(4)

        with kpi_col1:
            st.markdown('<div class="kpi-container">', unsafe_allow_html=True)
            st.metric("Total de Cr√©ditos (Consolidado)", f"R$ {st.session_state.total_credito:,.2f}")
            st.markdown('</div>', unsafe_allow_html=True)

        with kpi_col2:
            st.markdown('<div class="kpi-container">', unsafe_allow_html=True)
            st.metric("Total de D√©bitos (Consolidado)", f"R$ {st.session_state.total_debito:,.2f}")
            st.markdown('</div>', unsafe_allow_html=True)

        with kpi_col3:
            st.markdown('<div class="kpi-container">', unsafe_allow_html=True)
            delta_color = "normal" if st.session_state.saldo_periodo >= 0 else "inverse"
            st.metric("Resultado do Per√≠odo (Consolidado)", f"R$ {st.session_state.saldo_periodo:,.2f}", delta_color=delta_color)
            st.markdown('</div>', unsafe_allow_html=True)

        with kpi_col4:
            st.markdown('<div class="kpi-container">', unsafe_allow_html=True)
            st.metric("Soma dos Saldos Finais", f"R$ {saldos_finais:,.2f}") # saldos_finais √© a soma dos saldos finais dos extratos individuais, n√£o do per√≠odo.
            st.markdown('</div>', unsafe_allow_html=True)

        st.markdown("---")

        col_relatorio, col_tabela = st.columns([1, 1])

        with col_relatorio:
            st.subheader("Relat√≥rio de An√°lise de Fluxo de Caixa (DCF) Consolidada")
            st.markdown(st.session_state.relatorio_consolidado)

        with col_tabela:
            st.subheader("Dados Extra√≠dos e Estruturados (Consolidado)")
            edited_df = st.data_editor(
                st.session_state.df_transacoes,
                use_container_width=True,
                column_config={
                    "valor": st.column_config.NumberColumn("Valor (R$)", format="R$ %0.2f"),
                    "categoria_dcf": st.column_config.SelectboxColumn("Classifica√ß√£o DCF", options=["OPERACIONAL", "INVESTIMENTO", "FINANCIAMENTO"], required=True),
                    "entidade": st.column_config.SelectboxColumn("Entidade", options=["EMPRESARIAL", "PESSOAL"], required=True)
                },
                num_rows="dynamic",
                key="data_editor"
            )
            if st.button("Aplicar Edi√ß√µes e Recalcular Relat√≥rio", key="apply_edits_btn"):
                st.session_state.df_transacoes = edited_df
                st.session_state.total_credito = edited_df[edited_df['tipo_movimentacao'] == 'CREDITO']['valor'].sum()
                st.session_state.total_debito = edited_df[edited_df['tipo_movimentacao'] == 'DEBITO']['valor'].sum()
                st.session_state.saldo_periodo = st.session_state.total_credito - st.session_state.total_debito
                with st.spinner("Regerando Relat√≥rio com edi√ß√µes..."):
                    st.session_state.relatorio_consolidado = gerar_relatorio_consolidado(edited_df, contexto_adicional)
                st.success("‚úÖ Edi√ß√µes aplicadas e relat√≥rio recalculado!")
                st.rerun()

        st.markdown("---")

# Permite m√∫ltiplos arquivos


# NOVO: Caixa de texto para contexto adicional
contexto_adicional = st.text_area(
    "Contexto Adicional para a An√°lise (Opcional)",
    placeholder="Ex: 'Todos os dep√≥sitos em dinheiro (cash) s√£o provenientes de vendas diretas e devem ser considerados operacionais.'",
    help="Use este campo para fornecer √† IA informa√ß√µes contextuais que n√£o est√£o nos extratos, como a origem de dep√≥sitos espec√≠ficos."
)


if uploaded_files: # Verifica se h√° arquivos
    
    # Bot√£o para iniciar a an√°lise
    if st.button(f"Executar An√°lise CONSOLIDADA ({len(uploaded_files)} arquivos)", key="analyze_btn"):
        
        # Estruturas para agrega√ß√£o
        todas_transacoes = []
        saldos_finais = 0.0
        
        # 1. Loop para extra√ß√£o de dados e agrega√ß√£o
        extraction_status = st.empty()
        extraction_status.info("Iniciando extra√ß√£o e classifica√ß√£o DCF por arquivo...")
        
        for i, uploaded_file in enumerate(uploaded_files):
            extraction_status.info(f"Extraindo dados do arquivo {i+1} de {len(uploaded_files)}: **{uploaded_file.name}**")
            
            pdf_bytes = uploaded_file.getvalue()
            # Chama a fun√ß√£o de extra√ß√£o (que tamb√©m classifica DCF)
            dados_dict = analisar_extrato(pdf_bytes, uploaded_file.name)

            # Agrega√ß√£o
            todas_transacoes.extend(dados_dict['transacoes'])
            saldos_finais += dados_dict['saldo_final']
        
        # 2. Consolida√ß√£o final
        df_transacoes = pd.DataFrame(todas_transacoes)
        
        # Checa se h√° dados v√°lidos para prosseguir
        if df_transacoes.empty:
            extraction_status.error("Nenhuma transa√ß√£o v√°lida foi extra√≠da de todos os arquivos. A an√°lise consolidada n√£o pode ser realizada.")
            total_credito, total_debito, saldo_periodo = 0, 0, 0
            relatorio_consolidado = "**Falha na An√°lise Consolidada:** Nenhum dado extra√≠do."
        else:
            extraction_status.success(f"‚úÖ Extra√ß√£o de {len(todas_transacoes)} transa√ß√µes conclu√≠da! Gerando relat√≥rio consolidado...")

            # 3. C√°lculos de KPI consolidados
            total_credito = df_transacoes[df_transacoes['tipo_movimentacao'] == 'CREDITO']['valor'].sum()
            total_debito = df_transacoes[df_transacoes['tipo_movimentacao'] == 'DEBITO']['valor'].sum()
            saldo_periodo = total_credito - total_debito
            
            # 4. Gera√ß√£o do Relat√≥rio Consolidado (SEGUNDA CHAMADA AO GEMINI)
            with st.spinner("Gerando Relat√≥rio de An√°lise Consolidada..."):
                # PASSA O CONTEXTO ADICIONAL PARA A FUN√á√ÉO DE RELAT√ìRIO
                relatorio_consolidado = gerar_relatorio_consolidado(df_transacoes, contexto_adicional)
            
            extraction_status.empty() # Limpa a mensagem de status da extra√ß√£o
            st.success("‚úÖ An√°lise Consolidada Conclu√≠da com Sucesso!")


        # --- Exibi√ß√£o de KPIs Consolidados ---
        st.markdown("## Resumo Financeiro CONSOLIDADO do Per√≠odo")
        kpi_col1, kpi_col2, kpi_col3, kpi_col4 = st.columns(4)
        
        with kpi_col1:
            st.markdown('<div class="kpi-container">', unsafe_allow_html=True)
            st.metric("Total de Cr√©ditos (Consolidado)", f"R$ {total_credito:,.2f}")
            st.markdown('</div>', unsafe_allow_html=True)

        with kpi_col2:
            st.markdown('<div class="kpi-container">', unsafe_allow_html=True)
            st.metric("Total de D√©bitos (Consolidado)", f"R$ {total_debito:,.2f}")
            st.markdown('</div>', unsafe_allow_html=True)

        with kpi_col3:
            st.markdown('<div class="kpi-container">', unsafe_allow_html=True)
            # Determina a cor do resultado do per√≠odo
            delta_color = "normal" if saldo_periodo >= 0 else "inverse"
            st.metric("Resultado do Per√≠odo (Consolidado)", f"R$ {saldo_periodo:,.2f}", delta_color=delta_color)
            st.markdown('</div>', unsafe_allow_html=True)

        with kpi_col4:
            st.markdown('<div class="kpi-container">', unsafe_allow_html=True)
            # Nota: A soma dos saldos finais √© uma m√©trica meramente informativa.
            st.metric("Soma dos Saldos Finais", f"R$ {saldos_finais:,.2f}")
            st.markdown('</div>', unsafe_allow_html=True)


        # --- Apresenta√ß√£o de Resultados (Relat√≥rio e Tabela) ---
        
        st.markdown("---")
        
        col_relatorio, col_tabela = st.columns([1, 1])

        with col_relatorio:
            st.subheader("Relat√≥rio de An√°lise de Fluxo de Caixa (DCF) Consolidada")
            # Exibe o relat√≥rio consolidado
            st.markdown(relatorio_consolidado)

        with col_tabela:
            st.subheader("Dados Extra√≠dos e Estruturados (Consolidado)")
            # Exibe o DataFrame Consolidado
            st.dataframe(
                df_transacoes, 
                use_container_width=True,
                column_config={
                    "valor": st.column_config.NumberColumn("Valor (R$)", format="R$ %0.2f"),
                    "categoria_dcf": st.column_config.TextColumn("Classifica√ß√£o DCF") # Exibe a nova coluna
                }
            )

        st.markdown("---")
        
# 5.2. RODAP√â COM LOGO E INFORMA√á√ïES (AJUSTADO PARA ARQUIVO LOCAL)

with dashboard_tab:
    st.subheader("Dashboard de Fluxo de Caixa Mensal por Entidade")
    if 'df_transacoes' in st.session_state and not st.session_state.df_transacoes.empty:
        df_dashboard = st.session_state.df_transacoes.copy()
        df_dashboard['data'] = pd.to_datetime(df_dashboard['data'], errors='coerce')
        df_dashboard.dropna(subset=['data'], inplace=True)
        df_dashboard['mes_ano'] = df_dashboard['data'].dt.to_period('M').astype(str)

        # Calcular cr√©ditos e d√©bitos por m√™s, ano e entidade
        fluxo_caixa = df_dashboard.groupby(['mes_ano', 'entidade', 'tipo_movimentacao'])['valor'].sum().unstack(fill_value=0)
        fluxo_caixa['fluxo_liquido'] = fluxo_caixa.get('CREDITO', 0) - fluxo_caixa.get('DEBITO', 0)
        fluxo_caixa = fluxo_caixa.reset_index()

        # Pivotar para ter entidades como colunas para o gr√°fico
        df_plot = fluxo_caixa.pivot_table(index='mes_ano', columns='entidade', values='fluxo_liquido', fill_value=0)
        df_plot = df_plot.reindex(sorted(df_plot.index), axis=0) # Ordenar por m√™s/ano

        st.write("#### Fluxo de Caixa L√≠quido Mensal")
        st.bar_chart(df_plot)

        st.write("#### Detalhes do Fluxo de Caixa por Entidade")
        st.dataframe(fluxo_caixa, use_container_width=True)

        st.markdown("--- ")
        st.markdown("##### An√°lise da Capacidade de Cobertura")
        st.markdown("Esta se√ß√£o visa analisar se o fluxo de caixa operacional da empresa √© suficiente para cobrir as retiradas e gastos pessoais do(s) empreendedor(es).")
        
        # Calcular o fluxo de caixa empresarial e pessoal
        fluxo_empresarial = df_plot.get('EMPRESARIAL', pd.Series(dtype=float)).sum()
        fluxo_pessoal = df_plot.get('PESSOAL', pd.Series(dtype=float)).sum()

        if fluxo_empresarial > 0 and fluxo_pessoal < 0: # Empresa gerando caixa e pessoal consumindo
            cobertura = abs(fluxo_empresarial / fluxo_pessoal) if fluxo_pessoal != 0 else float('inf')
            st.info(f"O fluxo de caixa empresarial totalizou **R$ {fluxo_empresarial:,.2f}** e o pessoal **R$ {fluxo_pessoal:,.2f}** no per√≠odo. "
                    f"A empresa gerou um caixa operacional {cobertura:.2f} vezes maior que os gastos pessoais.")
        elif fluxo_empresarial > 0 and fluxo_pessoal >= 0:
            st.info(f"O fluxo de caixa empresarial totalizou **R$ {fluxo_empresarial:,.2f}** e o pessoal **R$ {fluxo_pessoal:,.2f}** no per√≠odo. "
                    f"Ambos os fluxos foram positivos, indicando uma excelente sa√∫de financeira.")
        elif fluxo_empresarial <= 0 and fluxo_pessoal < 0:
            st.warning(f"O fluxo de caixa empresarial foi **R$ {fluxo_empresarial:,.2f}** e o pessoal **R$ {fluxo_pessoal:,.2f}** no per√≠odo. "
                       f"Ambos os fluxos foram negativos ou nulos, sugerindo que a empresa n√£o est√° gerando caixa suficiente para cobrir suas pr√≥prias opera√ß√µes e/ou os gastos pessoais.")
        else:
            st.info("Dados insuficientes para uma an√°lise de cobertura clara. Verifique as classifica√ß√µes de entidade.")

    else:
        st.info("Fa√ßa o upload dos extratos e execute a an√°lise na aba 'An√°lise Principal' para visualizar o dashboard.")

st.markdown("---") # Linha divis√≥ria para o rodap√©
try:
    # 1. Tenta carregar a imagem local (AGORA .PNG)
    footer_logo = Image.open(LOGO_FILENAME)
    
    # 2. Cria colunas para o rodap√©: uma pequena para a logo e o restante para o texto
    footer_col1, footer_col2 = st.columns([1, 4]) 
    
    with footer_col1:
        # Exibe a logo (tamanho reduzido para rodap√©)
        st.image(footer_logo, width=40)
        
    with footer_col2:
        # Exibe o texto de informa√ß√£o (com um pequeno padding para alinhar com o logo)
        st.markdown(
            """
            <p style="font-size: 0.8rem; color: #6c757d; margin: 0; padding-top: 5px;">
                An√°lise de Extrato Empresarial | Dados extra√≠dos com Gemini 2.5 Pro.
            </p>
            """,
            unsafe_allow_html=True
        )
        
except FileNotFoundError:
    # Fallback se o arquivo local n√£o for encontrado
    st.markdown(
        """
        <p style="font-size: 0.8rem; color: #6c757d; margin: 0; padding-top: 10px;">
            An√°lise de Extrato Empresarial | Dados extra√≠dos com Gemini 2.5 Pro.
            (Logo do rodap√© n√£o encontrada.)
        </p>
        """,
        unsafe_allow_html=True
    )
except Exception as e:
    st.error(f"Erro ao carregar a logo do rodap√©: {e}")
